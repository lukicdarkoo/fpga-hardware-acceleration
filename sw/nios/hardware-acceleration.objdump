
hardware-acceleration.elf:     file format elf32-littlenios2
hardware-acceleration.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000021ac memsz 0x000021ac flags r-x
    LOAD off    0x000031cc vaddr 0x000421cc paddr 0x000422c0 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x000033b4 vaddr 0x000423b4 paddr 0x000423b4 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00040020  00040020  000032c0  2**0
                  CONTENTS
  2 .text         00001e5c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000350  00041e7c  00041e7c  00002e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  000421cc  000422c0  000031cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  000423b4  000423b4  000033b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000423cc  000423cc  000032c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000438  00000000  00000000  000032e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006ef9  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000249e  00000000  00000000  0000a619  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000287d  00000000  00000000  0000cab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000700  00000000  00000000  0000f334  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001632  00000000  00000000  0000fa34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003086  00000000  00000000  00011066  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000140ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004a0  00000000  00000000  00014110  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00015ac2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00015ac5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015ad1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015ad2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00015ad3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00015ade  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00015ae9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00015af4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000049  00000000  00000000  00015afe  2**0
                  CONTENTS, READONLY
 26 .jdi          00005089  00000000  00000000  00015b47  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00049388  00000000  00000000  0001abd0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040020 l    d  .text	00000000 .text
00041e7c l    d  .rodata	00000000 .rodata
000421cc l    d  .rwdata	00000000 .rwdata
000423b4 l    d  .bss	00000000 .bss
000423cc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/lukicdarkoo/EPFL/real-time-embedded-systems/acceleration/sw/hardware-acceleration_bsp//obj/HAL/src/crt0.o
00040068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
0004006c l     F .text	0000005c shift
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000409d4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000421cc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000422b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00041340 g     F .text	0000002c alt_main
000408d4 g     F .text	00000080 _puts_r
000422c0 g       *ABS*	00000000 __flash_rwdata_start
000423cc g       *ABS*	00000000 __alt_heap_start
000403c4 g     F .text	000001e0 csv_export
00040888 g     F .text	0000004c printf
00041680 g     F .text	0000000c alt_get_cpu_freq
0004168c g     F .text	00000210 perf_print_formatted_report
0004189c g     F .text	00000008 altera_nios2_gen2_irq_init
00040164 g     F .text	00000260 perfomance_test
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000423bc g     O .bss	00000004 errno
000423c4 g     O .bss	00000004 alt_argv
0004a2ac g       *ABS*	00000000 _gp
000405e8 g     F .text	00000028 memcpy
00040954 g     F .text	00000014 puts
000405c0 g     F .text	00000014 malloc
0004084c g     F .text	0000003c _printf_r
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00041188 g     F .text	00000064 .hidden __udivsi3
00041660 g     F .text	00000014 perf_get_num_starts
00040968 g     F .text	00000050 _sbrk_r
000422ac g     O .rwdata	00000004 _global_impure_ptr
000423cc g       *ABS*	00000000 __bss_end
00041904 g     F .text	00000578 .hidden __udivdi3
00041244 g     F .text	00000018 alt_dcache_flush_all
000422c0 g       *ABS*	00000000 __ram_rwdata_end
00041570 g     F .text	00000060 write
000421cc g       *ABS*	00000000 __ram_rodata_end
000422b8 g     O .rwdata	00000004 jtag_uart_0
000411ec g     F .text	00000058 .hidden __umodsi3
000423cc g       *ABS*	00000000 end
00080000 g       *ABS*	00000000 __alt_stack_pointer
00041604 g     F .text	00000034 altera_avalon_jtag_uart_write
00040a40 g     F .text	00000524 ___vfprintf_internal_r
00040610 g     F .text	000000e4 _free_r
0004136c g     F .text	00000170 alt_printf
00040020 g     F .text	0000004c _start
000415f0 g     F .text	00000014 alt_sys_init
000421cc g       *ABS*	00000000 __ram_rwdata_start
00041e7c g       *ABS*	00000000 __ram_rodata_start
00041638 g     F .text	00000020 perf_get_section_time
000423cc g       *ABS*	00000000 __alt_stack_base
00041658 g     F .text	00000008 perf_get_total_time
00041524 g     F .text	0000004c sbrk
00040f80 g     F .text	000000b8 __sfvwrite_small_dev
000423b4 g       *ABS*	00000000 __bss_start
000405a4 g     F .text	0000001c main
000423c0 g     O .bss	00000004 alt_envp
00080000 g       *ABS*	00000000 __alt_heap_limit
000406f4 g     F .text	00000158 _malloc_r
000422bc g     O .rwdata	00000004 alt_errno
00041090 g     F .text	00000084 .hidden __divsi3
00041e7c g       *ABS*	00000000 __flash_rodata_start
000415d0 g     F .text	00000020 alt_irq_init
000420cc g     O .rodata	00000100 .hidden __clz_tab
00041038 g     F .text	00000058 _write_r
000422b0 g     O .rwdata	00000004 _impure_ptr
000423c8 g     O .bss	00000004 alt_argc
000400c8 g     F .text	0000009c correctness_test
00040020 g       *ABS*	00000000 __ram_exceptions_start
000422c0 g       *ABS*	00000000 _edata
000423cc g       *ABS*	00000000 _end
00040020 g       *ABS*	00000000 __ram_exceptions_end
00041674 g     F .text	0000000c alt_get_performance_counter_base
00041114 g     F .text	00000074 .hidden __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
0004000c g       .entry	00000000 _exit
000418a4 g     F .text	00000060 .hidden __muldi3
000409b8 g     F .text	0000001c strlen
000414dc g     F .text	00000048 alt_putchar
000423b4 g     O .bss	00000004 __malloc_sbrk_start
0004125c g     F .text	00000004 alt_icache_flush_all
000423b8 g     O .bss	00000004 __malloc_free_list
00040f64 g     F .text	0000001c __vfprintf_internal
00041260 g     F .text	000000e0 alt_load
000405d4 g     F .text	00000014 free



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08400814 	ori	at,at,32
    jmp r1
   40008:	0800683a 	jmp	at

0004000c <_exit>:
	...

Disassembly of section .text:

00040020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40020:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
   40024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   4002c:	00bffd16 	blt	zero,r2,40024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40030:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   40034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   40038:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4003c:	d6a8ab14 	ori	gp,gp,41644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40040:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40044:	1088ed14 	ori	r2,r2,9140

    movhi r3, %hi(__bss_end)
   40048:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4004c:	18c8f314 	ori	r3,r3,9164

    beq r2, r3, 1f
   40050:	10c00326 	beq	r2,r3,40060 <_start+0x40>

0:
    stw zero, (r2)
   40054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4005c:	10fffd36 	bltu	r2,r3,40054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40060:	00412600 	call	41260 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40064:	00413400 	call	41340 <alt_main>

00040068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40068:	003fff06 	br	40068 <alt_after_alt_main>

0004006c <shift>:


inline static int shift(int a) {
	int b = 0;
	b |= (a & 0x000000FF) << 24;
	b |= (a & 0xFF000000) >> 24;
   4006c:	2006d63a 	srli	r3,r4,24
   40070:	2004963a 	slli	r2,r4,24
	for (int i = 0; i < 8; i++) {
		b |= (a & (1 << (i + 16))) >> (2 * i + 1);
		b |= (a & (1 << (i + 8))) << (15 - i * 2);
   40074:	02000044 	movi	r8,1

inline static int shift(int a) {
	int b = 0;
	b |= (a & 0x000000FF) << 24;
	b |= (a & 0xFF000000) >> 24;
	for (int i = 0; i < 8; i++) {
   40078:	02400604 	movi	r9,24


inline static int shift(int a) {
	int b = 0;
	b |= (a & 0x000000FF) << 24;
	b |= (a & 0xFF000000) >> 24;
   4007c:	1884b03a 	or	r2,r3,r2
   40080:	00c00404 	movi	r3,16
	for (int i = 0; i < 8; i++) {
		b |= (a & (1 << (i + 16))) >> (2 * i + 1);
		b |= (a & (1 << (i + 8))) << (15 - i * 2);
   40084:	19fffe04 	addi	r7,r3,-8
   40088:	41ce983a 	sll	r7,r8,r7
   4008c:	00cbc83a 	sub	r5,zero,r3
   40090:	294b883a 	add	r5,r5,r5
   40094:	390c703a 	and	r6,r7,r4
   40098:	29400bc4 	addi	r5,r5,47
   4009c:	314e983a 	sll	r7,r6,r5
   400a0:	40cc983a 	sll	r6,r8,r3
   400a4:	18cb883a 	add	r5,r3,r3
   400a8:	297ff844 	addi	r5,r5,-31
   400ac:	310c703a 	and	r6,r6,r4
   400b0:	314bd83a 	sra	r5,r6,r5
   400b4:	18c00044 	addi	r3,r3,1
   400b8:	394ab03a 	or	r5,r7,r5
   400bc:	1144b03a 	or	r2,r2,r5

inline static int shift(int a) {
	int b = 0;
	b |= (a & 0x000000FF) << 24;
	b |= (a & 0xFF000000) >> 24;
	for (int i = 0; i < 8; i++) {
   400c0:	1a7ff01e 	bne	r3,r9,40084 <shift+0x18>
		b |= (a & (1 << (i + 16))) >> (2 * i + 1);
		b |= (a & (1 << (i + 8))) << (15 - i * 2);
	}
	return b;
}
   400c4:	f800283a 	ret

000400c8 <correctness_test>:
	while ((IORD_32DIRECT(SWAP_ACCELERATOR_0_BASE, 12) & 0x0001) == 0);
}

void correctness_test() {
	int a = 0x11F0A0FF;
	unsigned long buffer[] = { a };
   400c8:	01047c74 	movhi	r4,4593
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 4, length);
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 8, 1);
	while ((IORD_32DIRECT(SWAP_ACCELERATOR_0_BASE, 12) & 0x0001) == 0);
}

void correctness_test() {
   400cc:	defffd04 	addi	sp,sp,-12
	int a = 0x11F0A0FF;
	unsigned long buffer[] = { a };
   400d0:	21283fc4 	addi	r4,r4,-24321
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 4, length);
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 8, 1);
	while ((IORD_32DIRECT(SWAP_ACCELERATOR_0_BASE, 12) & 0x0001) == 0);
}

void correctness_test() {
   400d4:	dfc00215 	stw	ra,8(sp)
   400d8:	dc000115 	stw	r16,4(sp)
	int a = 0x11F0A0FF;
	unsigned long buffer[] = { a };
   400dc:	d9000015 	stw	r4,0(sp)

	int res_custom = ALT_CI_SWAP_0(a, 0);
   400e0:	2021c032 	custom	0,r16,r4,zero
	int res_c = shift(a);
   400e4:	004006c0 	call	4006c <shift>
	}
	return b;
}

inline void accelerated_shift(unsigned long *buffer, unsigned short length) {
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 0, buffer);
   400e8:	00c00234 	movhi	r3,8
   400ec:	18c43404 	addi	r3,r3,4304
   400f0:	1ec00035 	stwio	sp,0(r3)
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 4, length);
   400f4:	01000234 	movhi	r4,8
   400f8:	00c00044 	movi	r3,1
   400fc:	21043504 	addi	r4,r4,4308
   40100:	20c00035 	stwio	r3,0(r4)
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 8, 1);
   40104:	01000234 	movhi	r4,8
   40108:	21043604 	addi	r4,r4,4312
   4010c:	20c00035 	stwio	r3,0(r4)
	while ((IORD_32DIRECT(SWAP_ACCELERATOR_0_BASE, 12) & 0x0001) == 0);
   40110:	01000234 	movhi	r4,8
   40114:	21043704 	addi	r4,r4,4316
   40118:	20c00037 	ldwio	r3,0(r4)
   4011c:	18c0004c 	andi	r3,r3,1
   40120:	183ffd26 	beq	r3,zero,40118 <correctness_test+0x50>

	int res_custom = ALT_CI_SWAP_0(a, 0);
	int res_c = shift(a);
	accelerated_shift(buffer, 1);

	alt_printf("Result from C is 0x%x \n", res_c);
   40124:	01000134 	movhi	r4,4
   40128:	100b883a 	mov	r5,r2
   4012c:	21079f04 	addi	r4,r4,7804
   40130:	004136c0 	call	4136c <alt_printf>
	alt_printf("Result from custom instruction is 0x%x \n", res_custom);
   40134:	01000134 	movhi	r4,4
   40138:	800b883a 	mov	r5,r16
   4013c:	2107a504 	addi	r4,r4,7828
   40140:	004136c0 	call	4136c <alt_printf>
	alt_printf("Result from accelerator is 0x%x \n", buffer[0]);
   40144:	d9400017 	ldw	r5,0(sp)
   40148:	01000134 	movhi	r4,4
   4014c:	2107b004 	addi	r4,r4,7872
   40150:	004136c0 	call	4136c <alt_printf>
}
   40154:	dfc00217 	ldw	ra,8(sp)
   40158:	dc000117 	ldw	r16,4(sp)
   4015c:	dec00304 	addi	sp,sp,12
   40160:	f800283a 	ret

00040164 <perfomance_test>:

void perfomance_test() {
   40164:	deffef04 	addi	sp,sp,-68
   40168:	df000f15 	stw	fp,60(sp)
	int a = 0x11F0A0FF;
	int sample_batches[] = { 1, 100, 1000 };
   4016c:	01400134 	movhi	r5,4
	alt_printf("Result from C is 0x%x \n", res_c);
	alt_printf("Result from custom instruction is 0x%x \n", res_custom);
	alt_printf("Result from accelerator is 0x%x \n", buffer[0]);
}

void perfomance_test() {
   40170:	df000f04 	addi	fp,sp,60
   40174:	dcc00a15 	stw	r19,40(sp)
   40178:	dc800915 	stw	r18,36(sp)
   4017c:	dfc01015 	stw	ra,64(sp)
   40180:	ddc00e15 	stw	r23,56(sp)
   40184:	dd800d15 	stw	r22,52(sp)
   40188:	dd400c15 	stw	r21,48(sp)
   4018c:	dd000b15 	stw	r20,44(sp)
   40190:	dc400815 	stw	r17,32(sp)
   40194:	dc000715 	stw	r16,28(sp)
	int a = 0x11F0A0FF;
	int sample_batches[] = { 1, 100, 1000 };
   40198:	01800304 	movi	r6,12
   4019c:	2947e304 	addi	r5,r5,8076
   401a0:	e13ff204 	addi	r4,fp,-56
   401a4:	00405e80 	call	405e8 <memcpy>
   401a8:	0025883a 	mov	r18,zero

	for (int ni = 0; ni < 3; ni++) {
		int n_samples = sample_batches[ni];

		// Custom instruction
		TIC
   401ac:	04c00044 	movi	r19,1
void perfomance_test() {
	int a = 0x11F0A0FF;
	int sample_batches[] = { 1, 100, 1000 };

	for (int ni = 0; ni < 3; ni++) {
		int n_samples = sample_batches[ni];
   401b0:	e0fff204 	addi	r3,fp,-56
   401b4:	1c85883a 	add	r2,r3,r18
   401b8:	15c00017 	ldw	r23,0(r2)

		// Custom instruction
		TIC
   401bc:	00800234 	movhi	r2,8
   401c0:	10841004 	addi	r2,r2,4160
   401c4:	14c00035 	stwio	r19,0(r2)
   401c8:	00c00234 	movhi	r3,8
   401cc:	18c41104 	addi	r3,r3,4164
   401d0:	18000035 	stwio	zero,0(r3)
   401d4:	05400234 	movhi	r21,8
   401d8:	ad441504 	addi	r21,r21,4180
   401dc:	a8000035 	stwio	zero,0(r21)
   401e0:	04400234 	movhi	r17,8
		for (int i = 0; i < n_samples; i++) {
   401e4:	0005883a 	mov	r2,zero
   401e8:	8c441004 	addi	r17,r17,4160
   401ec:	182d883a 	mov	r22,r3
   401f0:	15c0060e 	bge	r2,r23,4020c <perfomance_test+0xa8>
			volatile int res = ALT_CI_SWAP_0(a, 0);
   401f4:	00c47c74 	movhi	r3,4593
   401f8:	18e83fc4 	addi	r3,r3,-24321
   401fc:	1809c032 	custom	0,r4,r3,zero
   40200:	e13ff615 	stw	r4,-40(fp)
	for (int ni = 0; ni < 3; ni++) {
		int n_samples = sample_batches[ni];

		// Custom instruction
		TIC
		for (int i = 0; i < n_samples; i++) {
   40204:	10800044 	addi	r2,r2,1
   40208:	003ff906 	br	401f0 <perfomance_test+0x8c>
			volatile int res = ALT_CI_SWAP_0(a, 0);
		}
		TOC
   4020c:	05000234 	movhi	r20,8
   40210:	a5041404 	addi	r20,r20,4176
   40214:	a0000035 	stwio	zero,0(r20)
   40218:	88000035 	stwio	zero,0(r17)
		printf("Custom instruction (%d elements)\n", n_samples);
   4021c:	01000134 	movhi	r4,4
   40220:	b80b883a 	mov	r5,r23
   40224:	2107b904 	addi	r4,r4,7908
   40228:	00408880 	call	40888 <printf>
		TOC_PRINT
   4022c:	04000134 	movhi	r16,4
   40230:	8407c304 	addi	r16,r16,7948
   40234:	01c00134 	movhi	r7,4
   40238:	0140bef4 	movhi	r5,763
   4023c:	01000234 	movhi	r4,8
   40240:	dc000015 	stw	r16,0(sp)
   40244:	39c7c204 	addi	r7,r7,7944
   40248:	01800084 	movi	r6,2
   4024c:	297c2004 	addi	r5,r5,-3968
   40250:	21041004 	addi	r4,r4,4160
   40254:	004168c0 	call	4168c <perf_print_formatted_report>

		// C shift
		TIC
   40258:	8cc00035 	stwio	r19,0(r17)
   4025c:	b0000035 	stwio	zero,0(r22)
   40260:	a8000035 	stwio	zero,0(r21)
		for (int i = 0; i < n_samples; i++) {
   40264:	000b883a 	mov	r5,zero
   40268:	2dc0080e 	bge	r5,r23,4028c <perfomance_test+0x128>
			volatile int res = shift(a);
   4026c:	01047c74 	movhi	r4,4593
   40270:	21283fc4 	addi	r4,r4,-24321
   40274:	e17ff715 	stw	r5,-36(fp)
   40278:	004006c0 	call	4006c <shift>
		printf("Custom instruction (%d elements)\n", n_samples);
		TOC_PRINT

		// C shift
		TIC
		for (int i = 0; i < n_samples; i++) {
   4027c:	e17ff717 	ldw	r5,-36(fp)
			volatile int res = shift(a);
   40280:	e0bff515 	stw	r2,-44(fp)
		printf("Custom instruction (%d elements)\n", n_samples);
		TOC_PRINT

		// C shift
		TIC
		for (int i = 0; i < n_samples; i++) {
   40284:	29400044 	addi	r5,r5,1
   40288:	003ff706 	br	40268 <perfomance_test+0x104>
			volatile int res = shift(a);
		}
		TOC
   4028c:	a0000035 	stwio	zero,0(r20)
   40290:	88000035 	stwio	zero,0(r17)
		printf("C function (%d elements)\n", n_samples);
   40294:	01000134 	movhi	r4,4
   40298:	b80b883a 	mov	r5,r23
   4029c:	2107c504 	addi	r4,r4,7956
   402a0:	00408880 	call	40888 <printf>
		TOC_PRINT
   402a4:	01c00134 	movhi	r7,4
   402a8:	0140bef4 	movhi	r5,763
   402ac:	01000234 	movhi	r4,8
   402b0:	dc000015 	stw	r16,0(sp)
   402b4:	39c7c204 	addi	r7,r7,7944
   402b8:	01800084 	movi	r6,2
   402bc:	297c2004 	addi	r5,r5,-3968
   402c0:	21041004 	addi	r4,r4,4160
   402c4:	004168c0 	call	4168c <perf_print_formatted_report>

		// Accelerator
		volatile int buffer[n_samples];
   402c8:	bdc5883a 	add	r2,r23,r23
   402cc:	1085883a 	add	r2,r2,r2
   402d0:	10800184 	addi	r2,r2,6
   402d4:	1004d0ba 	srli	r2,r2,2
   402d8:	d811883a 	mov	r8,sp
   402dc:	1085883a 	add	r2,r2,r2
   402e0:	1085883a 	add	r2,r2,r2
   402e4:	d8b7c83a 	sub	sp,sp,r2
   402e8:	d9000104 	addi	r4,sp,4
		TIC
   402ec:	8cc00035 	stwio	r19,0(r17)
   402f0:	b0000035 	stwio	zero,0(r22)
   402f4:	a8000035 	stwio	zero,0(r21)
	}
	return b;
}

inline void accelerated_shift(unsigned long *buffer, unsigned short length) {
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 0, buffer);
   402f8:	00800234 	movhi	r2,8
   402fc:	10843404 	addi	r2,r2,4304
   40300:	11000035 	stwio	r4,0(r2)
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 4, length);
   40304:	01000234 	movhi	r4,8
   40308:	b8bfffcc 	andi	r2,r23,65535
   4030c:	21043504 	addi	r4,r4,4308
   40310:	20800035 	stwio	r2,0(r4)
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 8, 1);
   40314:	00800234 	movhi	r2,8
   40318:	10843604 	addi	r2,r2,4312
   4031c:	14c00035 	stwio	r19,0(r2)
	while ((IORD_32DIRECT(SWAP_ACCELERATOR_0_BASE, 12) & 0x0001) == 0);
   40320:	01000234 	movhi	r4,8
   40324:	21043704 	addi	r4,r4,4316
   40328:	20800037 	ldwio	r2,0(r4)
   4032c:	1080004c 	andi	r2,r2,1
   40330:	103ffd26 	beq	r2,zero,40328 <perfomance_test+0x1c4>

		// Accelerator
		volatile int buffer[n_samples];
		TIC
		accelerated_shift(buffer, n_samples);
		alt_dcache_flush_all();
   40334:	e23ff715 	stw	r8,-36(fp)
   40338:	00412440 	call	41244 <alt_dcache_flush_all>
		alt_icache_flush_all();
   4033c:	004125c0 	call	4125c <alt_icache_flush_all>
		TOC
   40340:	a0000035 	stwio	zero,0(r20)
   40344:	88000035 	stwio	zero,0(r17)
		printf("Accelerated shift (%d elements)\n", n_samples);
   40348:	01000134 	movhi	r4,4
   4034c:	b80b883a 	mov	r5,r23
   40350:	2107cc04 	addi	r4,r4,7984
   40354:	00408880 	call	40888 <printf>
		TOC_PRINT
   40358:	01c00134 	movhi	r7,4
   4035c:	0140bef4 	movhi	r5,763
   40360:	01000234 	movhi	r4,8
   40364:	dc000015 	stw	r16,0(sp)
   40368:	39c7c204 	addi	r7,r7,7944
   4036c:	01800084 	movi	r6,2
   40370:	297c2004 	addi	r5,r5,-3968
   40374:	21041004 	addi	r4,r4,4160
   40378:	004168c0 	call	4168c <perf_print_formatted_report>
   4037c:	e23ff717 	ldw	r8,-36(fp)
   40380:	94800104 	addi	r18,r18,4

void perfomance_test() {
	int a = 0x11F0A0FF;
	int sample_batches[] = { 1, 100, 1000 };

	for (int ni = 0; ni < 3; ni++) {
   40384:	00800304 	movi	r2,12
   40388:	4037883a 	mov	sp,r8
   4038c:	90bf881e 	bne	r18,r2,401b0 <perfomance_test+0x4c>
		alt_icache_flush_all();
		TOC
		printf("Accelerated shift (%d elements)\n", n_samples);
		TOC_PRINT
	}
}
   40390:	e6fff804 	addi	sp,fp,-32
   40394:	dfc00917 	ldw	ra,36(sp)
   40398:	df000817 	ldw	fp,32(sp)
   4039c:	ddc00717 	ldw	r23,28(sp)
   403a0:	dd800617 	ldw	r22,24(sp)
   403a4:	dd400517 	ldw	r21,20(sp)
   403a8:	dd000417 	ldw	r20,16(sp)
   403ac:	dcc00317 	ldw	r19,12(sp)
   403b0:	dc800217 	ldw	r18,8(sp)
   403b4:	dc400117 	ldw	r17,4(sp)
   403b8:	dc000017 	ldw	r16,0(sp)
   403bc:	dec00a04 	addi	sp,sp,40
   403c0:	f800283a 	ret

000403c4 <csv_export>:

void csv_export() {
   403c4:	deffe804 	addi	sp,sp,-96
	unsigned int time_custom;
	unsigned int time_c;
	unsigned int time_accelerator;
	int sample_batches[] = { 100000, 50000, 10000, 5000, 1000, 500, 100, 50, 10, 5, 1 };
   403c8:	01400134 	movhi	r5,4
   403cc:	01800b04 	movi	r6,44
   403d0:	2947e604 	addi	r5,r5,8088
   403d4:	d9000104 	addi	r4,sp,4
		printf("Accelerated shift (%d elements)\n", n_samples);
		TOC_PRINT
	}
}

void csv_export() {
   403d8:	dfc01715 	stw	ra,92(sp)
   403dc:	dcc01115 	stw	r19,68(sp)
   403e0:	dc801015 	stw	r18,64(sp)
   403e4:	df001615 	stw	fp,88(sp)
   403e8:	ddc01515 	stw	r23,84(sp)
   403ec:	dd801415 	stw	r22,80(sp)
   403f0:	dd401315 	stw	r21,76(sp)
   403f4:	dd001215 	stw	r20,72(sp)
   403f8:	dc400f15 	stw	r17,60(sp)
   403fc:	dc000e15 	stw	r16,56(sp)
	unsigned int time_custom;
	unsigned int time_c;
	unsigned int time_accelerator;
	int sample_batches[] = { 100000, 50000, 10000, 5000, 1000, 500, 100, 50, 10, 5, 1 };
   40400:	00405e80 	call	405e8 <memcpy>

	printf("BatchSize,Custom,CFunction,Accelerator\n");
   40404:	01000134 	movhi	r4,4
   40408:	2107d504 	addi	r4,r4,8020
   4040c:	00409540 	call	40954 <puts>
   40410:	0025883a 	mov	r18,zero
	for (int ni = 0; ni < sizeof(sample_batches) / 4; ni++) {
		int n_samples = sample_batches[ni];

		// Custom shift
		TIC
   40414:	04c00044 	movi	r19,1
	unsigned int time_accelerator;
	int sample_batches[] = { 100000, 50000, 10000, 5000, 1000, 500, 100, 50, 10, 5, 1 };

	printf("BatchSize,Custom,CFunction,Accelerator\n");
	for (int ni = 0; ni < sizeof(sample_batches) / 4; ni++) {
		int n_samples = sample_batches[ni];
   40418:	d8c00104 	addi	r3,sp,4
   4041c:	1c85883a 	add	r2,r3,r18
   40420:	14000017 	ldw	r16,0(r2)

		// Custom shift
		TIC
   40424:	00800234 	movhi	r2,8
   40428:	10841004 	addi	r2,r2,4160
   4042c:	14c00035 	stwio	r19,0(r2)
   40430:	00c00234 	movhi	r3,8
   40434:	18c41104 	addi	r3,r3,4164
   40438:	18000035 	stwio	zero,0(r3)
   4043c:	00800234 	movhi	r2,8
   40440:	10841504 	addi	r2,r2,4180
   40444:	10000035 	stwio	zero,0(r2)
   40448:	04400234 	movhi	r17,8
   4044c:	05400234 	movhi	r21,8
		for (int i = 0; i < n_samples; i++) {
   40450:	0005883a 	mov	r2,zero
   40454:	8c441004 	addi	r17,r17,4160
   40458:	182d883a 	mov	r22,r3
   4045c:	ad441504 	addi	r21,r21,4180
   40460:	1400040e 	bge	r2,r16,40474 <csv_export+0xb0>
			volatile int res = ALT_CI_SWAP_0(i, 0);
   40464:	1007c032 	custom	0,r3,r2,zero
   40468:	d8c00d15 	stw	r3,52(sp)
	for (int ni = 0; ni < sizeof(sample_batches) / 4; ni++) {
		int n_samples = sample_batches[ni];

		// Custom shift
		TIC
		for (int i = 0; i < n_samples; i++) {
   4046c:	10800044 	addi	r2,r2,1
   40470:	003ffb06 	br	40460 <csv_export+0x9c>
			volatile int res = ALT_CI_SWAP_0(i, 0);
		}
		TOC
   40474:	05000234 	movhi	r20,8
   40478:	a5041404 	addi	r20,r20,4176
   4047c:	a0000035 	stwio	zero,0(r20)
   40480:	88000035 	stwio	zero,0(r17)
		time_custom = perf_get_total_time(PERFORMANCE_COUNTER_0_BASE);
   40484:	01000234 	movhi	r4,8
   40488:	21041004 	addi	r4,r4,4160
   4048c:	00416580 	call	41658 <perf_get_total_time>

		// Accelerator
		volatile int* buffer = malloc(n_samples * sizeof(int));
   40490:	8409883a 	add	r4,r16,r16
   40494:	2109883a 	add	r4,r4,r4
		TIC
		for (int i = 0; i < n_samples; i++) {
			volatile int res = ALT_CI_SWAP_0(i, 0);
		}
		TOC
		time_custom = perf_get_total_time(PERFORMANCE_COUNTER_0_BASE);
   40498:	102f883a 	mov	r23,r2

		// Accelerator
		volatile int* buffer = malloc(n_samples * sizeof(int));
   4049c:	00405c00 	call	405c0 <malloc>
   404a0:	1039883a 	mov	fp,r2
		TIC
   404a4:	8cc00035 	stwio	r19,0(r17)
   404a8:	b0000035 	stwio	zero,0(r22)
   404ac:	a8000035 	stwio	zero,0(r21)
	}
	return b;
}

inline void accelerated_shift(unsigned long *buffer, unsigned short length) {
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 0, buffer);
   404b0:	00800234 	movhi	r2,8
   404b4:	10843404 	addi	r2,r2,4304
   404b8:	17000035 	stwio	fp,0(r2)
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 4, length);
   404bc:	00c00234 	movhi	r3,8
   404c0:	80bfffcc 	andi	r2,r16,65535
   404c4:	18c43504 	addi	r3,r3,4308
   404c8:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(SWAP_ACCELERATOR_0_BASE, 8, 1);
   404cc:	00800234 	movhi	r2,8
   404d0:	10843604 	addi	r2,r2,4312
   404d4:	14c00035 	stwio	r19,0(r2)
	while ((IORD_32DIRECT(SWAP_ACCELERATOR_0_BASE, 12) & 0x0001) == 0);
   404d8:	00c00234 	movhi	r3,8
   404dc:	18c43704 	addi	r3,r3,4316
   404e0:	18800037 	ldwio	r2,0(r3)
   404e4:	1080004c 	andi	r2,r2,1
   404e8:	103ffd26 	beq	r2,zero,404e0 <csv_export+0x11c>

		// Accelerator
		volatile int* buffer = malloc(n_samples * sizeof(int));
		TIC
		accelerated_shift(buffer, n_samples);
		alt_dcache_flush_all();
   404ec:	00412440 	call	41244 <alt_dcache_flush_all>
		// alt_icache_flush_all();
		TOC
   404f0:	a0000035 	stwio	zero,0(r20)
   404f4:	88000035 	stwio	zero,0(r17)
		free(buffer);
   404f8:	e009883a 	mov	r4,fp
   404fc:	00405d40 	call	405d4 <free>
		time_accelerator = perf_get_total_time(PERFORMANCE_COUNTER_0_BASE);
   40500:	01000234 	movhi	r4,8
   40504:	21041004 	addi	r4,r4,4160
   40508:	00416580 	call	41658 <perf_get_total_time>
   4050c:	1039883a 	mov	fp,r2

		// C shift
		TIC
   40510:	8cc00035 	stwio	r19,0(r17)
   40514:	b0000035 	stwio	zero,0(r22)
   40518:	a8000035 	stwio	zero,0(r21)
		for (int i = 0; i < n_samples; i++) {
   4051c:	002b883a 	mov	r21,zero
   40520:	ac00050e 	bge	r21,r16,40538 <csv_export+0x174>
			volatile int res = shift(i);
   40524:	a809883a 	mov	r4,r21
   40528:	004006c0 	call	4006c <shift>
   4052c:	d8800c15 	stw	r2,48(sp)
		free(buffer);
		time_accelerator = perf_get_total_time(PERFORMANCE_COUNTER_0_BASE);

		// C shift
		TIC
		for (int i = 0; i < n_samples; i++) {
   40530:	ad400044 	addi	r21,r21,1
   40534:	003ffa06 	br	40520 <csv_export+0x15c>
			volatile int res = shift(i);
		}
		TOC
   40538:	a0000035 	stwio	zero,0(r20)
   4053c:	88000035 	stwio	zero,0(r17)
		time_c = perf_get_total_time(PERFORMANCE_COUNTER_0_BASE);
   40540:	01000234 	movhi	r4,8
   40544:	21041004 	addi	r4,r4,4160
   40548:	00416580 	call	41658 <perf_get_total_time>

		printf("%d,%d,%d,%d\n", n_samples, time_custom, time_c, time_accelerator);
   4054c:	01000134 	movhi	r4,4
   40550:	df000015 	stw	fp,0(sp)
   40554:	100f883a 	mov	r7,r2
   40558:	b80d883a 	mov	r6,r23
   4055c:	800b883a 	mov	r5,r16
   40560:	2107df04 	addi	r4,r4,8060
   40564:	00408880 	call	40888 <printf>
   40568:	94800104 	addi	r18,r18,4
	unsigned int time_c;
	unsigned int time_accelerator;
	int sample_batches[] = { 100000, 50000, 10000, 5000, 1000, 500, 100, 50, 10, 5, 1 };

	printf("BatchSize,Custom,CFunction,Accelerator\n");
	for (int ni = 0; ni < sizeof(sample_batches) / 4; ni++) {
   4056c:	00800b04 	movi	r2,44
   40570:	90bfa91e 	bne	r18,r2,40418 <csv_export+0x54>
		TOC
		time_c = perf_get_total_time(PERFORMANCE_COUNTER_0_BASE);

		printf("%d,%d,%d,%d\n", n_samples, time_custom, time_c, time_accelerator);
	}
}
   40574:	dfc01717 	ldw	ra,92(sp)
   40578:	df001617 	ldw	fp,88(sp)
   4057c:	ddc01517 	ldw	r23,84(sp)
   40580:	dd801417 	ldw	r22,80(sp)
   40584:	dd401317 	ldw	r21,76(sp)
   40588:	dd001217 	ldw	r20,72(sp)
   4058c:	dcc01117 	ldw	r19,68(sp)
   40590:	dc801017 	ldw	r18,64(sp)
   40594:	dc400f17 	ldw	r17,60(sp)
   40598:	dc000e17 	ldw	r16,56(sp)
   4059c:	dec01804 	addi	sp,sp,96
   405a0:	f800283a 	ret

000405a4 <main>:

int main() {
   405a4:	deffff04 	addi	sp,sp,-4
   405a8:	dfc00015 	stw	ra,0(sp)
	csv_export();;
   405ac:	00403c40 	call	403c4 <csv_export>

	return 0;
}
   405b0:	0005883a 	mov	r2,zero
   405b4:	dfc00017 	ldw	ra,0(sp)
   405b8:	dec00104 	addi	sp,sp,4
   405bc:	f800283a 	ret

000405c0 <malloc>:
   405c0:	00800134 	movhi	r2,4
   405c4:	1088ac04 	addi	r2,r2,8880
   405c8:	200b883a 	mov	r5,r4
   405cc:	11000017 	ldw	r4,0(r2)
   405d0:	00406f41 	jmpi	406f4 <_malloc_r>

000405d4 <free>:
   405d4:	00800134 	movhi	r2,4
   405d8:	1088ac04 	addi	r2,r2,8880
   405dc:	200b883a 	mov	r5,r4
   405e0:	11000017 	ldw	r4,0(r2)
   405e4:	00406101 	jmpi	40610 <_free_r>

000405e8 <memcpy>:
   405e8:	2005883a 	mov	r2,r4
   405ec:	2007883a 	mov	r3,r4
   405f0:	218d883a 	add	r6,r4,r6
   405f4:	19800526 	beq	r3,r6,4060c <memcpy+0x24>
   405f8:	29000003 	ldbu	r4,0(r5)
   405fc:	18c00044 	addi	r3,r3,1
   40600:	29400044 	addi	r5,r5,1
   40604:	193fffc5 	stb	r4,-1(r3)
   40608:	003ffa06 	br	405f4 <memcpy+0xc>
   4060c:	f800283a 	ret

00040610 <_free_r>:
   40610:	28003726 	beq	r5,zero,406f0 <_free_r+0xe0>
   40614:	28ffff17 	ldw	r3,-4(r5)
   40618:	28bfff04 	addi	r2,r5,-4
   4061c:	1800010e 	bge	r3,zero,40624 <_free_r+0x14>
   40620:	10c5883a 	add	r2,r2,r3
   40624:	01400134 	movhi	r5,4
   40628:	2948ee04 	addi	r5,r5,9144
   4062c:	28c00017 	ldw	r3,0(r5)
   40630:	280d883a 	mov	r6,r5
   40634:	1800031e 	bne	r3,zero,40644 <_free_r+0x34>
   40638:	10000115 	stw	zero,4(r2)
   4063c:	28800015 	stw	r2,0(r5)
   40640:	f800283a 	ret
   40644:	10c00c2e 	bgeu	r2,r3,40678 <_free_r+0x68>
   40648:	11000017 	ldw	r4,0(r2)
   4064c:	110b883a 	add	r5,r2,r4
   40650:	1940041e 	bne	r3,r5,40664 <_free_r+0x54>
   40654:	19400017 	ldw	r5,0(r3)
   40658:	18c00117 	ldw	r3,4(r3)
   4065c:	2909883a 	add	r4,r5,r4
   40660:	11000015 	stw	r4,0(r2)
   40664:	10c00115 	stw	r3,4(r2)
   40668:	30800015 	stw	r2,0(r6)
   4066c:	f800283a 	ret
   40670:	11400336 	bltu	r2,r5,40680 <_free_r+0x70>
   40674:	2807883a 	mov	r3,r5
   40678:	19400117 	ldw	r5,4(r3)
   4067c:	283ffc1e 	bne	r5,zero,40670 <_free_r+0x60>
   40680:	19c00017 	ldw	r7,0(r3)
   40684:	19cd883a 	add	r6,r3,r7
   40688:	30800a1e 	bne	r6,r2,406b4 <_free_r+0xa4>
   4068c:	10800017 	ldw	r2,0(r2)
   40690:	3885883a 	add	r2,r7,r2
   40694:	18800015 	stw	r2,0(r3)
   40698:	1889883a 	add	r4,r3,r2
   4069c:	2900141e 	bne	r5,r4,406f0 <_free_r+0xe0>
   406a0:	29000017 	ldw	r4,0(r5)
   406a4:	2085883a 	add	r2,r4,r2
   406a8:	18800015 	stw	r2,0(r3)
   406ac:	28800117 	ldw	r2,4(r5)
   406b0:	00000e06 	br	406ec <_free_r+0xdc>
   406b4:	1180032e 	bgeu	r2,r6,406c4 <_free_r+0xb4>
   406b8:	00800304 	movi	r2,12
   406bc:	20800015 	stw	r2,0(r4)
   406c0:	f800283a 	ret
   406c4:	11000017 	ldw	r4,0(r2)
   406c8:	110d883a 	add	r6,r2,r4
   406cc:	2980061e 	bne	r5,r6,406e8 <_free_r+0xd8>
   406d0:	29800017 	ldw	r6,0(r5)
   406d4:	3109883a 	add	r4,r6,r4
   406d8:	11000015 	stw	r4,0(r2)
   406dc:	29000117 	ldw	r4,4(r5)
   406e0:	11000115 	stw	r4,4(r2)
   406e4:	00000106 	br	406ec <_free_r+0xdc>
   406e8:	11400115 	stw	r5,4(r2)
   406ec:	18800115 	stw	r2,4(r3)
   406f0:	f800283a 	ret

000406f4 <_malloc_r>:
   406f4:	defffb04 	addi	sp,sp,-20
   406f8:	00bfff04 	movi	r2,-4
   406fc:	dc400115 	stw	r17,4(sp)
   40700:	2c4000c4 	addi	r17,r5,3
   40704:	88a2703a 	and	r17,r17,r2
   40708:	dc800215 	stw	r18,8(sp)
   4070c:	dfc00415 	stw	ra,16(sp)
   40710:	dcc00315 	stw	r19,12(sp)
   40714:	dc000015 	stw	r16,0(sp)
   40718:	8c400204 	addi	r17,r17,8
   4071c:	00800304 	movi	r2,12
   40720:	2025883a 	mov	r18,r4
   40724:	8880022e 	bgeu	r17,r2,40730 <_malloc_r+0x3c>
   40728:	1023883a 	mov	r17,r2
   4072c:	00000506 	br	40744 <_malloc_r+0x50>
   40730:	8800040e 	bge	r17,zero,40744 <_malloc_r+0x50>
   40734:	00800304 	movi	r2,12
   40738:	90800015 	stw	r2,0(r18)
   4073c:	0005883a 	mov	r2,zero
   40740:	00003b06 	br	40830 <_malloc_r+0x13c>
   40744:	897ffb36 	bltu	r17,r5,40734 <_malloc_r+0x40>
   40748:	00800134 	movhi	r2,4
   4074c:	1088ee04 	addi	r2,r2,9144
   40750:	10c00017 	ldw	r3,0(r2)
   40754:	1009883a 	mov	r4,r2
   40758:	1821883a 	mov	r16,r3
   4075c:	80000926 	beq	r16,zero,40784 <_malloc_r+0x90>
   40760:	80800017 	ldw	r2,0(r16)
   40764:	1445c83a 	sub	r2,r2,r17
   40768:	10001516 	blt	r2,zero,407c0 <_malloc_r+0xcc>
   4076c:	014002c4 	movi	r5,11
   40770:	28800d2e 	bgeu	r5,r2,407a8 <_malloc_r+0xb4>
   40774:	80800015 	stw	r2,0(r16)
   40778:	80a1883a 	add	r16,r16,r2
   4077c:	84400015 	stw	r17,0(r16)
   40780:	8000221e 	bne	r16,zero,4080c <_malloc_r+0x118>
   40784:	04000134 	movhi	r16,4
   40788:	8408ed04 	addi	r16,r16,9140
   4078c:	80800017 	ldw	r2,0(r16)
   40790:	10000e1e 	bne	r2,zero,407cc <_malloc_r+0xd8>
   40794:	000b883a 	mov	r5,zero
   40798:	9009883a 	mov	r4,r18
   4079c:	00409680 	call	40968 <_sbrk_r>
   407a0:	80800015 	stw	r2,0(r16)
   407a4:	00000906 	br	407cc <_malloc_r+0xd8>
   407a8:	80800117 	ldw	r2,4(r16)
   407ac:	1c00021e 	bne	r3,r16,407b8 <_malloc_r+0xc4>
   407b0:	20800015 	stw	r2,0(r4)
   407b4:	00001506 	br	4080c <_malloc_r+0x118>
   407b8:	18800115 	stw	r2,4(r3)
   407bc:	00001306 	br	4080c <_malloc_r+0x118>
   407c0:	8007883a 	mov	r3,r16
   407c4:	84000117 	ldw	r16,4(r16)
   407c8:	003fe406 	br	4075c <_malloc_r+0x68>
   407cc:	880b883a 	mov	r5,r17
   407d0:	9009883a 	mov	r4,r18
   407d4:	00409680 	call	40968 <_sbrk_r>
   407d8:	04ffffc4 	movi	r19,-1
   407dc:	14ffd526 	beq	r2,r19,40734 <_malloc_r+0x40>
   407e0:	140000c4 	addi	r16,r2,3
   407e4:	00ffff04 	movi	r3,-4
   407e8:	80e0703a 	and	r16,r16,r3
   407ec:	1400021e 	bne	r2,r16,407f8 <_malloc_r+0x104>
   407f0:	84400015 	stw	r17,0(r16)
   407f4:	00000506 	br	4080c <_malloc_r+0x118>
   407f8:	808bc83a 	sub	r5,r16,r2
   407fc:	9009883a 	mov	r4,r18
   40800:	00409680 	call	40968 <_sbrk_r>
   40804:	14fffa1e 	bne	r2,r19,407f0 <_malloc_r+0xfc>
   40808:	003fca06 	br	40734 <_malloc_r+0x40>
   4080c:	810002c4 	addi	r4,r16,11
   40810:	00bffe04 	movi	r2,-8
   40814:	80c00104 	addi	r3,r16,4
   40818:	2084703a 	and	r2,r4,r2
   4081c:	10c7c83a 	sub	r3,r2,r3
   40820:	18000326 	beq	r3,zero,40830 <_malloc_r+0x13c>
   40824:	80e1883a 	add	r16,r16,r3
   40828:	00c7c83a 	sub	r3,zero,r3
   4082c:	80c00015 	stw	r3,0(r16)
   40830:	dfc00417 	ldw	ra,16(sp)
   40834:	dcc00317 	ldw	r19,12(sp)
   40838:	dc800217 	ldw	r18,8(sp)
   4083c:	dc400117 	ldw	r17,4(sp)
   40840:	dc000017 	ldw	r16,0(sp)
   40844:	dec00504 	addi	sp,sp,20
   40848:	f800283a 	ret

0004084c <_printf_r>:
   4084c:	defffd04 	addi	sp,sp,-12
   40850:	dfc00015 	stw	ra,0(sp)
   40854:	d9800115 	stw	r6,4(sp)
   40858:	d9c00215 	stw	r7,8(sp)
   4085c:	20c00217 	ldw	r3,8(r4)
   40860:	01800134 	movhi	r6,4
   40864:	3183e004 	addi	r6,r6,3968
   40868:	19800115 	stw	r6,4(r3)
   4086c:	280d883a 	mov	r6,r5
   40870:	21400217 	ldw	r5,8(r4)
   40874:	d9c00104 	addi	r7,sp,4
   40878:	0040a400 	call	40a40 <___vfprintf_internal_r>
   4087c:	dfc00017 	ldw	ra,0(sp)
   40880:	dec00304 	addi	sp,sp,12
   40884:	f800283a 	ret

00040888 <printf>:
   40888:	defffc04 	addi	sp,sp,-16
   4088c:	dfc00015 	stw	ra,0(sp)
   40890:	d9400115 	stw	r5,4(sp)
   40894:	d9800215 	stw	r6,8(sp)
   40898:	d9c00315 	stw	r7,12(sp)
   4089c:	00800134 	movhi	r2,4
   408a0:	1088ac04 	addi	r2,r2,8880
   408a4:	10800017 	ldw	r2,0(r2)
   408a8:	01400134 	movhi	r5,4
   408ac:	2943e004 	addi	r5,r5,3968
   408b0:	10c00217 	ldw	r3,8(r2)
   408b4:	d9800104 	addi	r6,sp,4
   408b8:	19400115 	stw	r5,4(r3)
   408bc:	200b883a 	mov	r5,r4
   408c0:	11000217 	ldw	r4,8(r2)
   408c4:	0040f640 	call	40f64 <__vfprintf_internal>
   408c8:	dfc00017 	ldw	ra,0(sp)
   408cc:	dec00404 	addi	sp,sp,16
   408d0:	f800283a 	ret

000408d4 <_puts_r>:
   408d4:	defffd04 	addi	sp,sp,-12
   408d8:	dc000015 	stw	r16,0(sp)
   408dc:	2021883a 	mov	r16,r4
   408e0:	2809883a 	mov	r4,r5
   408e4:	dfc00215 	stw	ra,8(sp)
   408e8:	dc400115 	stw	r17,4(sp)
   408ec:	2823883a 	mov	r17,r5
   408f0:	00409b80 	call	409b8 <strlen>
   408f4:	81400217 	ldw	r5,8(r16)
   408f8:	01000134 	movhi	r4,4
   408fc:	2103e004 	addi	r4,r4,3968
   40900:	29000115 	stw	r4,4(r5)
   40904:	100f883a 	mov	r7,r2
   40908:	880d883a 	mov	r6,r17
   4090c:	8009883a 	mov	r4,r16
   40910:	0040f800 	call	40f80 <__sfvwrite_small_dev>
   40914:	00ffffc4 	movi	r3,-1
   40918:	10c00926 	beq	r2,r3,40940 <_puts_r+0x6c>
   4091c:	81400217 	ldw	r5,8(r16)
   40920:	01800134 	movhi	r6,4
   40924:	01c00044 	movi	r7,1
   40928:	28800117 	ldw	r2,4(r5)
   4092c:	3187b804 	addi	r6,r6,7904
   40930:	8009883a 	mov	r4,r16
   40934:	103ee83a 	callr	r2
   40938:	10bfffe0 	cmpeqi	r2,r2,-1
   4093c:	0085c83a 	sub	r2,zero,r2
   40940:	dfc00217 	ldw	ra,8(sp)
   40944:	dc400117 	ldw	r17,4(sp)
   40948:	dc000017 	ldw	r16,0(sp)
   4094c:	dec00304 	addi	sp,sp,12
   40950:	f800283a 	ret

00040954 <puts>:
   40954:	00800134 	movhi	r2,4
   40958:	1088ac04 	addi	r2,r2,8880
   4095c:	200b883a 	mov	r5,r4
   40960:	11000017 	ldw	r4,0(r2)
   40964:	00408d41 	jmpi	408d4 <_puts_r>

00040968 <_sbrk_r>:
   40968:	defffd04 	addi	sp,sp,-12
   4096c:	dc000015 	stw	r16,0(sp)
   40970:	04000134 	movhi	r16,4
   40974:	dc400115 	stw	r17,4(sp)
   40978:	8408ef04 	addi	r16,r16,9148
   4097c:	2023883a 	mov	r17,r4
   40980:	2809883a 	mov	r4,r5
   40984:	dfc00215 	stw	ra,8(sp)
   40988:	80000015 	stw	zero,0(r16)
   4098c:	00415240 	call	41524 <sbrk>
   40990:	00ffffc4 	movi	r3,-1
   40994:	10c0031e 	bne	r2,r3,409a4 <_sbrk_r+0x3c>
   40998:	80c00017 	ldw	r3,0(r16)
   4099c:	18000126 	beq	r3,zero,409a4 <_sbrk_r+0x3c>
   409a0:	88c00015 	stw	r3,0(r17)
   409a4:	dfc00217 	ldw	ra,8(sp)
   409a8:	dc400117 	ldw	r17,4(sp)
   409ac:	dc000017 	ldw	r16,0(sp)
   409b0:	dec00304 	addi	sp,sp,12
   409b4:	f800283a 	ret

000409b8 <strlen>:
   409b8:	2005883a 	mov	r2,r4
   409bc:	10c00007 	ldb	r3,0(r2)
   409c0:	18000226 	beq	r3,zero,409cc <strlen+0x14>
   409c4:	10800044 	addi	r2,r2,1
   409c8:	003ffc06 	br	409bc <strlen+0x4>
   409cc:	1105c83a 	sub	r2,r2,r4
   409d0:	f800283a 	ret

000409d4 <print_repeat>:
   409d4:	defffb04 	addi	sp,sp,-20
   409d8:	dc800315 	stw	r18,12(sp)
   409dc:	dc400215 	stw	r17,8(sp)
   409e0:	dc000115 	stw	r16,4(sp)
   409e4:	dfc00415 	stw	ra,16(sp)
   409e8:	2025883a 	mov	r18,r4
   409ec:	2823883a 	mov	r17,r5
   409f0:	d9800005 	stb	r6,0(sp)
   409f4:	3821883a 	mov	r16,r7
   409f8:	04000a0e 	bge	zero,r16,40a24 <print_repeat+0x50>
   409fc:	88800117 	ldw	r2,4(r17)
   40a00:	01c00044 	movi	r7,1
   40a04:	d80d883a 	mov	r6,sp
   40a08:	880b883a 	mov	r5,r17
   40a0c:	9009883a 	mov	r4,r18
   40a10:	103ee83a 	callr	r2
   40a14:	843fffc4 	addi	r16,r16,-1
   40a18:	103ff726 	beq	r2,zero,409f8 <print_repeat+0x24>
   40a1c:	00bfffc4 	movi	r2,-1
   40a20:	00000106 	br	40a28 <print_repeat+0x54>
   40a24:	0005883a 	mov	r2,zero
   40a28:	dfc00417 	ldw	ra,16(sp)
   40a2c:	dc800317 	ldw	r18,12(sp)
   40a30:	dc400217 	ldw	r17,8(sp)
   40a34:	dc000117 	ldw	r16,4(sp)
   40a38:	dec00504 	addi	sp,sp,20
   40a3c:	f800283a 	ret

00040a40 <___vfprintf_internal_r>:
   40a40:	deffe504 	addi	sp,sp,-108
   40a44:	d8c00804 	addi	r3,sp,32
   40a48:	df001915 	stw	fp,100(sp)
   40a4c:	ddc01815 	stw	r23,96(sp)
   40a50:	dd801715 	stw	r22,92(sp)
   40a54:	dd401615 	stw	r21,88(sp)
   40a58:	dd001515 	stw	r20,84(sp)
   40a5c:	dcc01415 	stw	r19,80(sp)
   40a60:	dc801315 	stw	r18,76(sp)
   40a64:	dc401215 	stw	r17,72(sp)
   40a68:	dc001115 	stw	r16,68(sp)
   40a6c:	dfc01a15 	stw	ra,104(sp)
   40a70:	2027883a 	mov	r19,r4
   40a74:	2839883a 	mov	fp,r5
   40a78:	382d883a 	mov	r22,r7
   40a7c:	d9800f15 	stw	r6,60(sp)
   40a80:	0021883a 	mov	r16,zero
   40a84:	d8000e15 	stw	zero,56(sp)
   40a88:	002f883a 	mov	r23,zero
   40a8c:	002b883a 	mov	r21,zero
   40a90:	0025883a 	mov	r18,zero
   40a94:	0023883a 	mov	r17,zero
   40a98:	d8000c15 	stw	zero,48(sp)
   40a9c:	d8000b15 	stw	zero,44(sp)
   40aa0:	0029883a 	mov	r20,zero
   40aa4:	d8c00915 	stw	r3,36(sp)
   40aa8:	d8c00f17 	ldw	r3,60(sp)
   40aac:	19000003 	ldbu	r4,0(r3)
   40ab0:	20803fcc 	andi	r2,r4,255
   40ab4:	1080201c 	xori	r2,r2,128
   40ab8:	10bfe004 	addi	r2,r2,-128
   40abc:	10011c26 	beq	r2,zero,40f30 <___vfprintf_internal_r+0x4f0>
   40ac0:	00c00044 	movi	r3,1
   40ac4:	a0c01426 	beq	r20,r3,40b18 <___vfprintf_internal_r+0xd8>
   40ac8:	1d000216 	blt	r3,r20,40ad4 <___vfprintf_internal_r+0x94>
   40acc:	a0000626 	beq	r20,zero,40ae8 <___vfprintf_internal_r+0xa8>
   40ad0:	00011306 	br	40f20 <___vfprintf_internal_r+0x4e0>
   40ad4:	01400084 	movi	r5,2
   40ad8:	a1401d26 	beq	r20,r5,40b50 <___vfprintf_internal_r+0x110>
   40adc:	014000c4 	movi	r5,3
   40ae0:	a1402926 	beq	r20,r5,40b88 <___vfprintf_internal_r+0x148>
   40ae4:	00010e06 	br	40f20 <___vfprintf_internal_r+0x4e0>
   40ae8:	01400944 	movi	r5,37
   40aec:	1140fb26 	beq	r2,r5,40edc <___vfprintf_internal_r+0x49c>
   40af0:	e0800117 	ldw	r2,4(fp)
   40af4:	d9000005 	stb	r4,0(sp)
   40af8:	01c00044 	movi	r7,1
   40afc:	d80d883a 	mov	r6,sp
   40b00:	e00b883a 	mov	r5,fp
   40b04:	9809883a 	mov	r4,r19
   40b08:	103ee83a 	callr	r2
   40b0c:	1000d61e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40b10:	84000044 	addi	r16,r16,1
   40b14:	00010206 	br	40f20 <___vfprintf_internal_r+0x4e0>
   40b18:	01400c04 	movi	r5,48
   40b1c:	1140f826 	beq	r2,r5,40f00 <___vfprintf_internal_r+0x4c0>
   40b20:	01400944 	movi	r5,37
   40b24:	11400a1e 	bne	r2,r5,40b50 <___vfprintf_internal_r+0x110>
   40b28:	d8800005 	stb	r2,0(sp)
   40b2c:	e0800117 	ldw	r2,4(fp)
   40b30:	a00f883a 	mov	r7,r20
   40b34:	d80d883a 	mov	r6,sp
   40b38:	e00b883a 	mov	r5,fp
   40b3c:	9809883a 	mov	r4,r19
   40b40:	103ee83a 	callr	r2
   40b44:	1000c81e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40b48:	84000044 	addi	r16,r16,1
   40b4c:	0000f306 	br	40f1c <___vfprintf_internal_r+0x4dc>
   40b50:	217ff404 	addi	r5,r4,-48
   40b54:	29403fcc 	andi	r5,r5,255
   40b58:	00c00244 	movi	r3,9
   40b5c:	19400736 	bltu	r3,r5,40b7c <___vfprintf_internal_r+0x13c>
   40b60:	00bfffc4 	movi	r2,-1
   40b64:	88800226 	beq	r17,r2,40b70 <___vfprintf_internal_r+0x130>
   40b68:	8c4002a4 	muli	r17,r17,10
   40b6c:	00000106 	br	40b74 <___vfprintf_internal_r+0x134>
   40b70:	0023883a 	mov	r17,zero
   40b74:	2c63883a 	add	r17,r5,r17
   40b78:	0000e206 	br	40f04 <___vfprintf_internal_r+0x4c4>
   40b7c:	01400b84 	movi	r5,46
   40b80:	1140e426 	beq	r2,r5,40f14 <___vfprintf_internal_r+0x4d4>
   40b84:	05000084 	movi	r20,2
   40b88:	213ff404 	addi	r4,r4,-48
   40b8c:	21003fcc 	andi	r4,r4,255
   40b90:	00c00244 	movi	r3,9
   40b94:	19000736 	bltu	r3,r4,40bb4 <___vfprintf_internal_r+0x174>
   40b98:	00bfffc4 	movi	r2,-1
   40b9c:	90800226 	beq	r18,r2,40ba8 <___vfprintf_internal_r+0x168>
   40ba0:	948002a4 	muli	r18,r18,10
   40ba4:	00000106 	br	40bac <___vfprintf_internal_r+0x16c>
   40ba8:	0025883a 	mov	r18,zero
   40bac:	24a5883a 	add	r18,r4,r18
   40bb0:	0000db06 	br	40f20 <___vfprintf_internal_r+0x4e0>
   40bb4:	00c01b04 	movi	r3,108
   40bb8:	10c0d426 	beq	r2,r3,40f0c <___vfprintf_internal_r+0x4cc>
   40bbc:	013fffc4 	movi	r4,-1
   40bc0:	91000226 	beq	r18,r4,40bcc <___vfprintf_internal_r+0x18c>
   40bc4:	d8000b15 	stw	zero,44(sp)
   40bc8:	00000106 	br	40bd0 <___vfprintf_internal_r+0x190>
   40bcc:	04800044 	movi	r18,1
   40bd0:	01001a44 	movi	r4,105
   40bd4:	11001626 	beq	r2,r4,40c30 <___vfprintf_internal_r+0x1f0>
   40bd8:	20800916 	blt	r4,r2,40c00 <___vfprintf_internal_r+0x1c0>
   40bdc:	010018c4 	movi	r4,99
   40be0:	11008a26 	beq	r2,r4,40e0c <___vfprintf_internal_r+0x3cc>
   40be4:	01001904 	movi	r4,100
   40be8:	11001126 	beq	r2,r4,40c30 <___vfprintf_internal_r+0x1f0>
   40bec:	01001604 	movi	r4,88
   40bf0:	1100ca1e 	bne	r2,r4,40f1c <___vfprintf_internal_r+0x4dc>
   40bf4:	00c00044 	movi	r3,1
   40bf8:	d8c00e15 	stw	r3,56(sp)
   40bfc:	00001406 	br	40c50 <___vfprintf_internal_r+0x210>
   40c00:	01001cc4 	movi	r4,115
   40c04:	11009a26 	beq	r2,r4,40e70 <___vfprintf_internal_r+0x430>
   40c08:	20800416 	blt	r4,r2,40c1c <___vfprintf_internal_r+0x1dc>
   40c0c:	01001bc4 	movi	r4,111
   40c10:	1100c21e 	bne	r2,r4,40f1c <___vfprintf_internal_r+0x4dc>
   40c14:	05400204 	movi	r21,8
   40c18:	00000e06 	br	40c54 <___vfprintf_internal_r+0x214>
   40c1c:	01001d44 	movi	r4,117
   40c20:	11000c26 	beq	r2,r4,40c54 <___vfprintf_internal_r+0x214>
   40c24:	01001e04 	movi	r4,120
   40c28:	11000926 	beq	r2,r4,40c50 <___vfprintf_internal_r+0x210>
   40c2c:	0000bb06 	br	40f1c <___vfprintf_internal_r+0x4dc>
   40c30:	b5000104 	addi	r20,r22,4
   40c34:	b8000726 	beq	r23,zero,40c54 <___vfprintf_internal_r+0x214>
   40c38:	dd000d15 	stw	r20,52(sp)
   40c3c:	b5800017 	ldw	r22,0(r22)
   40c40:	b000080e 	bge	r22,zero,40c64 <___vfprintf_internal_r+0x224>
   40c44:	05adc83a 	sub	r22,zero,r22
   40c48:	02800044 	movi	r10,1
   40c4c:	00000606 	br	40c68 <___vfprintf_internal_r+0x228>
   40c50:	05400404 	movi	r21,16
   40c54:	b0c00104 	addi	r3,r22,4
   40c58:	d8c00d15 	stw	r3,52(sp)
   40c5c:	b5800017 	ldw	r22,0(r22)
   40c60:	002f883a 	mov	r23,zero
   40c64:	0015883a 	mov	r10,zero
   40c68:	d829883a 	mov	r20,sp
   40c6c:	b0001426 	beq	r22,zero,40cc0 <___vfprintf_internal_r+0x280>
   40c70:	b009883a 	mov	r4,r22
   40c74:	a80b883a 	mov	r5,r21
   40c78:	da801015 	stw	r10,64(sp)
   40c7c:	00411880 	call	41188 <__udivsi3>
   40c80:	1549383a 	mul	r4,r2,r21
   40c84:	00c00244 	movi	r3,9
   40c88:	da801017 	ldw	r10,64(sp)
   40c8c:	b12dc83a 	sub	r22,r22,r4
   40c90:	1d800216 	blt	r3,r22,40c9c <___vfprintf_internal_r+0x25c>
   40c94:	b5800c04 	addi	r22,r22,48
   40c98:	00000506 	br	40cb0 <___vfprintf_internal_r+0x270>
   40c9c:	d8c00e17 	ldw	r3,56(sp)
   40ca0:	18000226 	beq	r3,zero,40cac <___vfprintf_internal_r+0x26c>
   40ca4:	b5800dc4 	addi	r22,r22,55
   40ca8:	00000106 	br	40cb0 <___vfprintf_internal_r+0x270>
   40cac:	b58015c4 	addi	r22,r22,87
   40cb0:	a5800005 	stb	r22,0(r20)
   40cb4:	a5000044 	addi	r20,r20,1
   40cb8:	102d883a 	mov	r22,r2
   40cbc:	003feb06 	br	40c6c <___vfprintf_internal_r+0x22c>
   40cc0:	a6c7c83a 	sub	r3,r20,sp
   40cc4:	d8c00a15 	stw	r3,40(sp)
   40cc8:	90c5c83a 	sub	r2,r18,r3
   40ccc:	00800a0e 	bge	zero,r2,40cf8 <___vfprintf_internal_r+0x2b8>
   40cd0:	a085883a 	add	r2,r20,r2
   40cd4:	01400c04 	movi	r5,48
   40cd8:	d8c00917 	ldw	r3,36(sp)
   40cdc:	a009883a 	mov	r4,r20
   40ce0:	a0c0032e 	bgeu	r20,r3,40cf0 <___vfprintf_internal_r+0x2b0>
   40ce4:	a5000044 	addi	r20,r20,1
   40ce8:	21400005 	stb	r5,0(r4)
   40cec:	a0bffa1e 	bne	r20,r2,40cd8 <___vfprintf_internal_r+0x298>
   40cf0:	a6c7c83a 	sub	r3,r20,sp
   40cf4:	d8c00a15 	stw	r3,40(sp)
   40cf8:	d8c00a17 	ldw	r3,40(sp)
   40cfc:	50d3883a 	add	r9,r10,r3
   40d00:	d8c00b17 	ldw	r3,44(sp)
   40d04:	8a6dc83a 	sub	r22,r17,r9
   40d08:	18001726 	beq	r3,zero,40d68 <___vfprintf_internal_r+0x328>
   40d0c:	50000a26 	beq	r10,zero,40d38 <___vfprintf_internal_r+0x2f8>
   40d10:	00800b44 	movi	r2,45
   40d14:	d8800805 	stb	r2,32(sp)
   40d18:	e0800117 	ldw	r2,4(fp)
   40d1c:	01c00044 	movi	r7,1
   40d20:	d9800804 	addi	r6,sp,32
   40d24:	e00b883a 	mov	r5,fp
   40d28:	9809883a 	mov	r4,r19
   40d2c:	103ee83a 	callr	r2
   40d30:	10004d1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40d34:	84000044 	addi	r16,r16,1
   40d38:	0580070e 	bge	zero,r22,40d58 <___vfprintf_internal_r+0x318>
   40d3c:	b00f883a 	mov	r7,r22
   40d40:	01800c04 	movi	r6,48
   40d44:	e00b883a 	mov	r5,fp
   40d48:	9809883a 	mov	r4,r19
   40d4c:	00409d40 	call	409d4 <print_repeat>
   40d50:	1000451e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40d54:	85a1883a 	add	r16,r16,r22
   40d58:	d8c00a17 	ldw	r3,40(sp)
   40d5c:	a013883a 	mov	r9,r20
   40d60:	1d2dc83a 	sub	r22,r3,r20
   40d64:	00002206 	br	40df0 <___vfprintf_internal_r+0x3b0>
   40d68:	0580090e 	bge	zero,r22,40d90 <___vfprintf_internal_r+0x350>
   40d6c:	b00f883a 	mov	r7,r22
   40d70:	01800804 	movi	r6,32
   40d74:	e00b883a 	mov	r5,fp
   40d78:	9809883a 	mov	r4,r19
   40d7c:	da801015 	stw	r10,64(sp)
   40d80:	00409d40 	call	409d4 <print_repeat>
   40d84:	da801017 	ldw	r10,64(sp)
   40d88:	1000371e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40d8c:	85a1883a 	add	r16,r16,r22
   40d90:	503ff126 	beq	r10,zero,40d58 <___vfprintf_internal_r+0x318>
   40d94:	00800b44 	movi	r2,45
   40d98:	d8800805 	stb	r2,32(sp)
   40d9c:	e0800117 	ldw	r2,4(fp)
   40da0:	01c00044 	movi	r7,1
   40da4:	d9800804 	addi	r6,sp,32
   40da8:	e00b883a 	mov	r5,fp
   40dac:	9809883a 	mov	r4,r19
   40db0:	103ee83a 	callr	r2
   40db4:	10002c1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40db8:	84000044 	addi	r16,r16,1
   40dbc:	003fe606 	br	40d58 <___vfprintf_internal_r+0x318>
   40dc0:	4a7fffc4 	addi	r9,r9,-1
   40dc4:	48800003 	ldbu	r2,0(r9)
   40dc8:	01c00044 	movi	r7,1
   40dcc:	d9800804 	addi	r6,sp,32
   40dd0:	d8800805 	stb	r2,32(sp)
   40dd4:	e0800117 	ldw	r2,4(fp)
   40dd8:	e00b883a 	mov	r5,fp
   40ddc:	da401015 	stw	r9,64(sp)
   40de0:	9809883a 	mov	r4,r19
   40de4:	103ee83a 	callr	r2
   40de8:	da401017 	ldw	r9,64(sp)
   40dec:	10001e1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40df0:	8245c83a 	sub	r2,r16,r9
   40df4:	4d89883a 	add	r4,r9,r22
   40df8:	a085883a 	add	r2,r20,r2
   40dfc:	013ff016 	blt	zero,r4,40dc0 <___vfprintf_internal_r+0x380>
   40e00:	1021883a 	mov	r16,r2
   40e04:	dd800d17 	ldw	r22,52(sp)
   40e08:	00004406 	br	40f1c <___vfprintf_internal_r+0x4dc>
   40e0c:	00800044 	movi	r2,1
   40e10:	1440080e 	bge	r2,r17,40e34 <___vfprintf_internal_r+0x3f4>
   40e14:	8d3fffc4 	addi	r20,r17,-1
   40e18:	a00f883a 	mov	r7,r20
   40e1c:	01800804 	movi	r6,32
   40e20:	e00b883a 	mov	r5,fp
   40e24:	9809883a 	mov	r4,r19
   40e28:	00409d40 	call	409d4 <print_repeat>
   40e2c:	10000e1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40e30:	8521883a 	add	r16,r16,r20
   40e34:	b0800017 	ldw	r2,0(r22)
   40e38:	01c00044 	movi	r7,1
   40e3c:	d80d883a 	mov	r6,sp
   40e40:	d8800005 	stb	r2,0(sp)
   40e44:	e0800117 	ldw	r2,4(fp)
   40e48:	e00b883a 	mov	r5,fp
   40e4c:	9809883a 	mov	r4,r19
   40e50:	b5000104 	addi	r20,r22,4
   40e54:	103ee83a 	callr	r2
   40e58:	1000031e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40e5c:	84000044 	addi	r16,r16,1
   40e60:	a02d883a 	mov	r22,r20
   40e64:	00002d06 	br	40f1c <___vfprintf_internal_r+0x4dc>
   40e68:	00bfffc4 	movi	r2,-1
   40e6c:	00003106 	br	40f34 <___vfprintf_internal_r+0x4f4>
   40e70:	b5000017 	ldw	r20,0(r22)
   40e74:	b0c00104 	addi	r3,r22,4
   40e78:	d8c00a15 	stw	r3,40(sp)
   40e7c:	a009883a 	mov	r4,r20
   40e80:	00409b80 	call	409b8 <strlen>
   40e84:	8893c83a 	sub	r9,r17,r2
   40e88:	102d883a 	mov	r22,r2
   40e8c:	0240090e 	bge	zero,r9,40eb4 <___vfprintf_internal_r+0x474>
   40e90:	480f883a 	mov	r7,r9
   40e94:	01800804 	movi	r6,32
   40e98:	e00b883a 	mov	r5,fp
   40e9c:	9809883a 	mov	r4,r19
   40ea0:	da401015 	stw	r9,64(sp)
   40ea4:	00409d40 	call	409d4 <print_repeat>
   40ea8:	da401017 	ldw	r9,64(sp)
   40eac:	103fee1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40eb0:	8261883a 	add	r16,r16,r9
   40eb4:	e0800117 	ldw	r2,4(fp)
   40eb8:	b00f883a 	mov	r7,r22
   40ebc:	a00d883a 	mov	r6,r20
   40ec0:	e00b883a 	mov	r5,fp
   40ec4:	9809883a 	mov	r4,r19
   40ec8:	103ee83a 	callr	r2
   40ecc:	103fe61e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x428>
   40ed0:	85a1883a 	add	r16,r16,r22
   40ed4:	dd800a17 	ldw	r22,40(sp)
   40ed8:	00001006 	br	40f1c <___vfprintf_internal_r+0x4dc>
   40edc:	05c00044 	movi	r23,1
   40ee0:	04bfffc4 	movi	r18,-1
   40ee4:	d8000e15 	stw	zero,56(sp)
   40ee8:	05400284 	movi	r21,10
   40eec:	9023883a 	mov	r17,r18
   40ef0:	d8000c15 	stw	zero,48(sp)
   40ef4:	d8000b15 	stw	zero,44(sp)
   40ef8:	b829883a 	mov	r20,r23
   40efc:	00000806 	br	40f20 <___vfprintf_internal_r+0x4e0>
   40f00:	dd000b15 	stw	r20,44(sp)
   40f04:	05000084 	movi	r20,2
   40f08:	00000506 	br	40f20 <___vfprintf_internal_r+0x4e0>
   40f0c:	00c00044 	movi	r3,1
   40f10:	d8c00c15 	stw	r3,48(sp)
   40f14:	050000c4 	movi	r20,3
   40f18:	00000106 	br	40f20 <___vfprintf_internal_r+0x4e0>
   40f1c:	0029883a 	mov	r20,zero
   40f20:	d8c00f17 	ldw	r3,60(sp)
   40f24:	18c00044 	addi	r3,r3,1
   40f28:	d8c00f15 	stw	r3,60(sp)
   40f2c:	003ede06 	br	40aa8 <___vfprintf_internal_r+0x68>
   40f30:	8005883a 	mov	r2,r16
   40f34:	dfc01a17 	ldw	ra,104(sp)
   40f38:	df001917 	ldw	fp,100(sp)
   40f3c:	ddc01817 	ldw	r23,96(sp)
   40f40:	dd801717 	ldw	r22,92(sp)
   40f44:	dd401617 	ldw	r21,88(sp)
   40f48:	dd001517 	ldw	r20,84(sp)
   40f4c:	dcc01417 	ldw	r19,80(sp)
   40f50:	dc801317 	ldw	r18,76(sp)
   40f54:	dc401217 	ldw	r17,72(sp)
   40f58:	dc001117 	ldw	r16,68(sp)
   40f5c:	dec01b04 	addi	sp,sp,108
   40f60:	f800283a 	ret

00040f64 <__vfprintf_internal>:
   40f64:	00800134 	movhi	r2,4
   40f68:	1088ac04 	addi	r2,r2,8880
   40f6c:	300f883a 	mov	r7,r6
   40f70:	280d883a 	mov	r6,r5
   40f74:	200b883a 	mov	r5,r4
   40f78:	11000017 	ldw	r4,0(r2)
   40f7c:	0040a401 	jmpi	40a40 <___vfprintf_internal_r>

00040f80 <__sfvwrite_small_dev>:
   40f80:	2880000b 	ldhu	r2,0(r5)
   40f84:	1080020c 	andi	r2,r2,8
   40f88:	10002126 	beq	r2,zero,41010 <__sfvwrite_small_dev+0x90>
   40f8c:	2880008f 	ldh	r2,2(r5)
   40f90:	defffa04 	addi	sp,sp,-24
   40f94:	dc000015 	stw	r16,0(sp)
   40f98:	dfc00515 	stw	ra,20(sp)
   40f9c:	dd000415 	stw	r20,16(sp)
   40fa0:	dcc00315 	stw	r19,12(sp)
   40fa4:	dc800215 	stw	r18,8(sp)
   40fa8:	dc400115 	stw	r17,4(sp)
   40fac:	2821883a 	mov	r16,r5
   40fb0:	10001216 	blt	r2,zero,40ffc <__sfvwrite_small_dev+0x7c>
   40fb4:	2027883a 	mov	r19,r4
   40fb8:	3025883a 	mov	r18,r6
   40fbc:	3823883a 	mov	r17,r7
   40fc0:	05010004 	movi	r20,1024
   40fc4:	04400b0e 	bge	zero,r17,40ff4 <__sfvwrite_small_dev+0x74>
   40fc8:	880f883a 	mov	r7,r17
   40fcc:	a440010e 	bge	r20,r17,40fd4 <__sfvwrite_small_dev+0x54>
   40fd0:	01c10004 	movi	r7,1024
   40fd4:	8140008f 	ldh	r5,2(r16)
   40fd8:	900d883a 	mov	r6,r18
   40fdc:	9809883a 	mov	r4,r19
   40fe0:	00410380 	call	41038 <_write_r>
   40fe4:	0080050e 	bge	zero,r2,40ffc <__sfvwrite_small_dev+0x7c>
   40fe8:	88a3c83a 	sub	r17,r17,r2
   40fec:	90a5883a 	add	r18,r18,r2
   40ff0:	003ff406 	br	40fc4 <__sfvwrite_small_dev+0x44>
   40ff4:	0005883a 	mov	r2,zero
   40ff8:	00000706 	br	41018 <__sfvwrite_small_dev+0x98>
   40ffc:	8080000b 	ldhu	r2,0(r16)
   41000:	10801014 	ori	r2,r2,64
   41004:	8080000d 	sth	r2,0(r16)
   41008:	00bfffc4 	movi	r2,-1
   4100c:	00000206 	br	41018 <__sfvwrite_small_dev+0x98>
   41010:	00bfffc4 	movi	r2,-1
   41014:	f800283a 	ret
   41018:	dfc00517 	ldw	ra,20(sp)
   4101c:	dd000417 	ldw	r20,16(sp)
   41020:	dcc00317 	ldw	r19,12(sp)
   41024:	dc800217 	ldw	r18,8(sp)
   41028:	dc400117 	ldw	r17,4(sp)
   4102c:	dc000017 	ldw	r16,0(sp)
   41030:	dec00604 	addi	sp,sp,24
   41034:	f800283a 	ret

00041038 <_write_r>:
   41038:	defffd04 	addi	sp,sp,-12
   4103c:	dc000015 	stw	r16,0(sp)
   41040:	04000134 	movhi	r16,4
   41044:	dc400115 	stw	r17,4(sp)
   41048:	8408ef04 	addi	r16,r16,9148
   4104c:	2023883a 	mov	r17,r4
   41050:	2809883a 	mov	r4,r5
   41054:	300b883a 	mov	r5,r6
   41058:	380d883a 	mov	r6,r7
   4105c:	dfc00215 	stw	ra,8(sp)
   41060:	80000015 	stw	zero,0(r16)
   41064:	00415700 	call	41570 <write>
   41068:	00ffffc4 	movi	r3,-1
   4106c:	10c0031e 	bne	r2,r3,4107c <_write_r+0x44>
   41070:	80c00017 	ldw	r3,0(r16)
   41074:	18000126 	beq	r3,zero,4107c <_write_r+0x44>
   41078:	88c00015 	stw	r3,0(r17)
   4107c:	dfc00217 	ldw	ra,8(sp)
   41080:	dc400117 	ldw	r17,4(sp)
   41084:	dc000017 	ldw	r16,0(sp)
   41088:	dec00304 	addi	sp,sp,12
   4108c:	f800283a 	ret

00041090 <__divsi3>:
   41090:	20001b16 	blt	r4,zero,41100 <__divsi3+0x70>
   41094:	000f883a 	mov	r7,zero
   41098:	28001616 	blt	r5,zero,410f4 <__divsi3+0x64>
   4109c:	200d883a 	mov	r6,r4
   410a0:	29001a2e 	bgeu	r5,r4,4110c <__divsi3+0x7c>
   410a4:	00800804 	movi	r2,32
   410a8:	00c00044 	movi	r3,1
   410ac:	00000106 	br	410b4 <__divsi3+0x24>
   410b0:	10000d26 	beq	r2,zero,410e8 <__divsi3+0x58>
   410b4:	294b883a 	add	r5,r5,r5
   410b8:	10bfffc4 	addi	r2,r2,-1
   410bc:	18c7883a 	add	r3,r3,r3
   410c0:	293ffb36 	bltu	r5,r4,410b0 <__divsi3+0x20>
   410c4:	0005883a 	mov	r2,zero
   410c8:	18000726 	beq	r3,zero,410e8 <__divsi3+0x58>
   410cc:	0005883a 	mov	r2,zero
   410d0:	31400236 	bltu	r6,r5,410dc <__divsi3+0x4c>
   410d4:	314dc83a 	sub	r6,r6,r5
   410d8:	10c4b03a 	or	r2,r2,r3
   410dc:	1806d07a 	srli	r3,r3,1
   410e0:	280ad07a 	srli	r5,r5,1
   410e4:	183ffa1e 	bne	r3,zero,410d0 <__divsi3+0x40>
   410e8:	38000126 	beq	r7,zero,410f0 <__divsi3+0x60>
   410ec:	0085c83a 	sub	r2,zero,r2
   410f0:	f800283a 	ret
   410f4:	014bc83a 	sub	r5,zero,r5
   410f8:	39c0005c 	xori	r7,r7,1
   410fc:	003fe706 	br	4109c <__divsi3+0xc>
   41100:	0109c83a 	sub	r4,zero,r4
   41104:	01c00044 	movi	r7,1
   41108:	003fe306 	br	41098 <__divsi3+0x8>
   4110c:	00c00044 	movi	r3,1
   41110:	003fee06 	br	410cc <__divsi3+0x3c>

00041114 <__modsi3>:
   41114:	20001716 	blt	r4,zero,41174 <__modsi3+0x60>
   41118:	000f883a 	mov	r7,zero
   4111c:	2005883a 	mov	r2,r4
   41120:	28001216 	blt	r5,zero,4116c <__modsi3+0x58>
   41124:	2900162e 	bgeu	r5,r4,41180 <__modsi3+0x6c>
   41128:	01800804 	movi	r6,32
   4112c:	00c00044 	movi	r3,1
   41130:	00000106 	br	41138 <__modsi3+0x24>
   41134:	30000a26 	beq	r6,zero,41160 <__modsi3+0x4c>
   41138:	294b883a 	add	r5,r5,r5
   4113c:	31bfffc4 	addi	r6,r6,-1
   41140:	18c7883a 	add	r3,r3,r3
   41144:	293ffb36 	bltu	r5,r4,41134 <__modsi3+0x20>
   41148:	18000526 	beq	r3,zero,41160 <__modsi3+0x4c>
   4114c:	1806d07a 	srli	r3,r3,1
   41150:	11400136 	bltu	r2,r5,41158 <__modsi3+0x44>
   41154:	1145c83a 	sub	r2,r2,r5
   41158:	280ad07a 	srli	r5,r5,1
   4115c:	183ffb1e 	bne	r3,zero,4114c <__modsi3+0x38>
   41160:	38000126 	beq	r7,zero,41168 <__modsi3+0x54>
   41164:	0085c83a 	sub	r2,zero,r2
   41168:	f800283a 	ret
   4116c:	014bc83a 	sub	r5,zero,r5
   41170:	003fec06 	br	41124 <__modsi3+0x10>
   41174:	0109c83a 	sub	r4,zero,r4
   41178:	01c00044 	movi	r7,1
   4117c:	003fe706 	br	4111c <__modsi3+0x8>
   41180:	00c00044 	movi	r3,1
   41184:	003ff106 	br	4114c <__modsi3+0x38>

00041188 <__udivsi3>:
   41188:	200d883a 	mov	r6,r4
   4118c:	2900152e 	bgeu	r5,r4,411e4 <__udivsi3+0x5c>
   41190:	28001416 	blt	r5,zero,411e4 <__udivsi3+0x5c>
   41194:	00800804 	movi	r2,32
   41198:	00c00044 	movi	r3,1
   4119c:	00000206 	br	411a8 <__udivsi3+0x20>
   411a0:	10000e26 	beq	r2,zero,411dc <__udivsi3+0x54>
   411a4:	28000516 	blt	r5,zero,411bc <__udivsi3+0x34>
   411a8:	294b883a 	add	r5,r5,r5
   411ac:	10bfffc4 	addi	r2,r2,-1
   411b0:	18c7883a 	add	r3,r3,r3
   411b4:	293ffa36 	bltu	r5,r4,411a0 <__udivsi3+0x18>
   411b8:	18000826 	beq	r3,zero,411dc <__udivsi3+0x54>
   411bc:	0005883a 	mov	r2,zero
   411c0:	31400236 	bltu	r6,r5,411cc <__udivsi3+0x44>
   411c4:	314dc83a 	sub	r6,r6,r5
   411c8:	10c4b03a 	or	r2,r2,r3
   411cc:	1806d07a 	srli	r3,r3,1
   411d0:	280ad07a 	srli	r5,r5,1
   411d4:	183ffa1e 	bne	r3,zero,411c0 <__udivsi3+0x38>
   411d8:	f800283a 	ret
   411dc:	0005883a 	mov	r2,zero
   411e0:	f800283a 	ret
   411e4:	00c00044 	movi	r3,1
   411e8:	003ff406 	br	411bc <__udivsi3+0x34>

000411ec <__umodsi3>:
   411ec:	2005883a 	mov	r2,r4
   411f0:	2900122e 	bgeu	r5,r4,4123c <__umodsi3+0x50>
   411f4:	28001116 	blt	r5,zero,4123c <__umodsi3+0x50>
   411f8:	01800804 	movi	r6,32
   411fc:	00c00044 	movi	r3,1
   41200:	00000206 	br	4120c <__umodsi3+0x20>
   41204:	30000c26 	beq	r6,zero,41238 <__umodsi3+0x4c>
   41208:	28000516 	blt	r5,zero,41220 <__umodsi3+0x34>
   4120c:	294b883a 	add	r5,r5,r5
   41210:	31bfffc4 	addi	r6,r6,-1
   41214:	18c7883a 	add	r3,r3,r3
   41218:	293ffa36 	bltu	r5,r4,41204 <__umodsi3+0x18>
   4121c:	18000626 	beq	r3,zero,41238 <__umodsi3+0x4c>
   41220:	1806d07a 	srli	r3,r3,1
   41224:	11400136 	bltu	r2,r5,4122c <__umodsi3+0x40>
   41228:	1145c83a 	sub	r2,r2,r5
   4122c:	280ad07a 	srli	r5,r5,1
   41230:	183ffb1e 	bne	r3,zero,41220 <__umodsi3+0x34>
   41234:	f800283a 	ret
   41238:	f800283a 	ret
   4123c:	00c00044 	movi	r3,1
   41240:	003ff706 	br	41220 <__umodsi3+0x34>

00041244 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   41244:	0005883a 	mov	r2,zero
   41248:	00c40004 	movi	r3,4096
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4124c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   41250:	10800804 	addi	r2,r2,32
   41254:	10fffd1e 	bne	r2,r3,4124c <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   41258:	f800283a 	ret

0004125c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4125c:	f800283a 	ret

00041260 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   41260:	deffff04 	addi	sp,sp,-4
   41264:	01000134 	movhi	r4,4
   41268:	01400134 	movhi	r5,4
   4126c:	dfc00015 	stw	ra,0(sp)
   41270:	21087304 	addi	r4,r4,8652
   41274:	2948b004 	addi	r5,r5,8896

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   41278:	2140061e 	bne	r4,r5,41294 <alt_load+0x34>
   4127c:	01000134 	movhi	r4,4
   41280:	01400134 	movhi	r5,4
   41284:	21000804 	addi	r4,r4,32
   41288:	29400804 	addi	r5,r5,32
   4128c:	2140121e 	bne	r4,r5,412d8 <alt_load+0x78>
   41290:	00000b06 	br	412c0 <alt_load+0x60>
   41294:	00c00134 	movhi	r3,4
   41298:	18c8b004 	addi	r3,r3,8896
   4129c:	1907c83a 	sub	r3,r3,r4
   412a0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   412a4:	10fff526 	beq	r2,r3,4127c <alt_load+0x1c>
    {
      *to++ = *from++;
   412a8:	114f883a 	add	r7,r2,r5
   412ac:	39c00017 	ldw	r7,0(r7)
   412b0:	110d883a 	add	r6,r2,r4
   412b4:	10800104 	addi	r2,r2,4
   412b8:	31c00015 	stw	r7,0(r6)
   412bc:	003ff906 	br	412a4 <alt_load+0x44>
   412c0:	01000134 	movhi	r4,4
   412c4:	01400134 	movhi	r5,4
   412c8:	21079f04 	addi	r4,r4,7804
   412cc:	29479f04 	addi	r5,r5,7804

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   412d0:	2140101e 	bne	r4,r5,41314 <alt_load+0xb4>
   412d4:	00000b06 	br	41304 <alt_load+0xa4>
   412d8:	00c00134 	movhi	r3,4
   412dc:	18c00804 	addi	r3,r3,32
   412e0:	1907c83a 	sub	r3,r3,r4
   412e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   412e8:	10fff526 	beq	r2,r3,412c0 <alt_load+0x60>
    {
      *to++ = *from++;
   412ec:	114f883a 	add	r7,r2,r5
   412f0:	39c00017 	ldw	r7,0(r7)
   412f4:	110d883a 	add	r6,r2,r4
   412f8:	10800104 	addi	r2,r2,4
   412fc:	31c00015 	stw	r7,0(r6)
   41300:	003ff906 	br	412e8 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   41304:	00412440 	call	41244 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   41308:	dfc00017 	ldw	ra,0(sp)
   4130c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   41310:	004125c1 	jmpi	4125c <alt_icache_flush_all>
   41314:	00c00134 	movhi	r3,4
   41318:	18c87304 	addi	r3,r3,8652
   4131c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   41320:	0005883a 	mov	r2,zero
  {
    while( to != end )
   41324:	18bff726 	beq	r3,r2,41304 <alt_load+0xa4>
    {
      *to++ = *from++;
   41328:	114f883a 	add	r7,r2,r5
   4132c:	39c00017 	ldw	r7,0(r7)
   41330:	110d883a 	add	r6,r2,r4
   41334:	10800104 	addi	r2,r2,4
   41338:	31c00015 	stw	r7,0(r6)
   4133c:	003ff906 	br	41324 <alt_load+0xc4>

00041340 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   41340:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   41344:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   41348:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4134c:	00415d00 	call	415d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   41350:	00415f00 	call	415f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   41354:	d1a04517 	ldw	r6,-32492(gp)
   41358:	d1604617 	ldw	r5,-32488(gp)
   4135c:	d1204717 	ldw	r4,-32484(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   41360:	dfc00017 	ldw	ra,0(sp)
   41364:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   41368:	00405a41 	jmpi	405a4 <main>

0004136c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   4136c:	defff204 	addi	sp,sp,-56
   41370:	2005883a 	mov	r2,r4
   41374:	dfc00a15 	stw	ra,40(sp)
   41378:	df000915 	stw	fp,36(sp)
   4137c:	ddc00815 	stw	r23,32(sp)
   41380:	dd800715 	stw	r22,28(sp)
   41384:	dd400615 	stw	r21,24(sp)
   41388:	dd000515 	stw	r20,20(sp)
   4138c:	dcc00415 	stw	r19,16(sp)
   41390:	dc800315 	stw	r18,12(sp)
   41394:	dc400215 	stw	r17,8(sp)
   41398:	dc000115 	stw	r16,4(sp)
   4139c:	d9400b15 	stw	r5,44(sp)
   413a0:	d9800c15 	stw	r6,48(sp)
   413a4:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   413a8:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   413ac:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   413b0:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   413b4:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   413b8:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   413bc:	11000007 	ldb	r4,0(r2)
   413c0:	20003a26 	beq	r4,zero,414ac <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   413c4:	24000226 	beq	r4,r16,413d0 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   413c8:	14400044 	addi	r17,r2,1
   413cc:	00001406 	br	41420 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   413d0:	14400084 	addi	r17,r2,2
   413d4:	10800047 	ldb	r2,1(r2)
   413d8:	10003426 	beq	r2,zero,414ac <alt_printf+0x140>
            {
                if (c == '%')
   413dc:	1400021e 	bne	r2,r16,413e8 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   413e0:	8009883a 	mov	r4,r16
   413e4:	00000e06 	br	41420 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   413e8:	1480051e 	bne	r2,r18,41400 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   413ec:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   413f0:	ad800104 	addi	r22,r21,4
   413f4:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   413f8:	00414dc0 	call	414dc <alt_putchar>
   413fc:	00002906 	br	414a4 <alt_printf+0x138>
                }
                else if (c == 'x')
   41400:	14c0201e 	bne	r2,r19,41484 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   41404:	adc00017 	ldw	r23,0(r21)
   41408:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   4140c:	b8000326 	beq	r23,zero,4141c <alt_printf+0xb0>
   41410:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   41414:	00c003c4 	movi	r3,15
   41418:	00000306 	br	41428 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   4141c:	01000c04 	movi	r4,48
   41420:	00414dc0 	call	414dc <alt_putchar>
                        continue;
   41424:	00001f06 	br	414a4 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   41428:	1d84983a 	sll	r2,r3,r22
   4142c:	15c4703a 	and	r2,r2,r23
   41430:	1000021e 	bne	r2,zero,4143c <alt_printf+0xd0>
                        digit_shift -= 4;
   41434:	b5bfff04 	addi	r22,r22,-4
   41438:	003ffb06 	br	41428 <alt_printf+0xbc>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   4143c:	070003c4 	movi	fp,15
                        if (digit <= 9)
   41440:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   41444:	b0001716 	blt	r22,zero,414a4 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   41448:	e588983a 	sll	r4,fp,r22
   4144c:	25c8703a 	and	r4,r4,r23
   41450:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   41454:	19000236 	bltu	r3,r4,41460 <alt_printf+0xf4>
                            c = '0' + digit;
   41458:	21000c04 	addi	r4,r4,48
   4145c:	00000106 	br	41464 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   41460:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   41464:	21003fcc 	andi	r4,r4,255
   41468:	2100201c 	xori	r4,r4,128
   4146c:	213fe004 	addi	r4,r4,-128
   41470:	d8c00015 	stw	r3,0(sp)
   41474:	00414dc0 	call	414dc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   41478:	b5bfff04 	addi	r22,r22,-4
   4147c:	d8c00017 	ldw	r3,0(sp)
   41480:	003ff006 	br	41444 <alt_printf+0xd8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   41484:	1500071e 	bne	r2,r20,414a4 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   41488:	ad800017 	ldw	r22,0(r21)
   4148c:	ad400104 	addi	r21,r21,4

                    while(*s)
   41490:	b1000007 	ldb	r4,0(r22)
   41494:	20000326 	beq	r4,zero,414a4 <alt_printf+0x138>
                      alt_putchar(*s++);
   41498:	b5800044 	addi	r22,r22,1
   4149c:	00414dc0 	call	414dc <alt_putchar>
   414a0:	003ffb06 	br	41490 <alt_printf+0x124>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   414a4:	8805883a 	mov	r2,r17
   414a8:	003fc406 	br	413bc <alt_printf+0x50>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   414ac:	dfc00a17 	ldw	ra,40(sp)
   414b0:	df000917 	ldw	fp,36(sp)
   414b4:	ddc00817 	ldw	r23,32(sp)
   414b8:	dd800717 	ldw	r22,28(sp)
   414bc:	dd400617 	ldw	r21,24(sp)
   414c0:	dd000517 	ldw	r20,20(sp)
   414c4:	dcc00417 	ldw	r19,16(sp)
   414c8:	dc800317 	ldw	r18,12(sp)
   414cc:	dc400217 	ldw	r17,8(sp)
   414d0:	dc000117 	ldw	r16,4(sp)
   414d4:	dec00e04 	addi	sp,sp,56
   414d8:	f800283a 	ret

000414dc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   414dc:	defffd04 	addi	sp,sp,-12
   414e0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   414e4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   414e8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   414ec:	01000134 	movhi	r4,4
   414f0:	000f883a 	mov	r7,zero
   414f4:	01800044 	movi	r6,1
   414f8:	d80b883a 	mov	r5,sp
   414fc:	2108ae04 	addi	r4,r4,8888
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   41500:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   41504:	00416040 	call	41604 <altera_avalon_jtag_uart_write>
   41508:	00ffffc4 	movi	r3,-1
   4150c:	10c00126 	beq	r2,r3,41514 <alt_putchar+0x38>
        return -1;
    }
    return c;
   41510:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   41514:	dfc00217 	ldw	ra,8(sp)
   41518:	dc000117 	ldw	r16,4(sp)
   4151c:	dec00304 	addi	sp,sp,12
   41520:	f800283a 	ret

00041524 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41524:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41528:	00bfff84 	movi	r2,-2
   4152c:	2884703a 	and	r2,r5,r2
   41530:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   41534:	d0a00217 	ldw	r2,-32760(gp)
   41538:	00ffff04 	movi	r3,-4
   4153c:	108000c4 	addi	r2,r2,3
   41540:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   41544:	00c00234 	movhi	r3,8
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   41548:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4154c:	1109883a 	add	r4,r2,r4
   41550:	18c00004 	addi	r3,r3,0
   41554:	1900032e 	bgeu	r3,r4,41564 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41558:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4155c:	00bfffc4 	movi	r2,-1
   41560:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   41564:	d1200215 	stw	r4,-32760(gp)
   41568:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   4156c:	f800283a 	ret

00041570 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   41570:	00800044 	movi	r2,1
   41574:	20800226 	beq	r4,r2,41580 <write+0x10>
   41578:	00800084 	movi	r2,2
   4157c:	2080041e 	bne	r4,r2,41590 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   41580:	01000134 	movhi	r4,4
   41584:	000f883a 	mov	r7,zero
   41588:	2108ae04 	addi	r4,r4,8888
   4158c:	00416041 	jmpi	41604 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   41590:	d0a00417 	ldw	r2,-32752(gp)
   41594:	10000926 	beq	r2,zero,415bc <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   41598:	deffff04 	addi	sp,sp,-4
   4159c:	dfc00015 	stw	ra,0(sp)
   415a0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   415a4:	00c01444 	movi	r3,81
   415a8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   415ac:	00bfffc4 	movi	r2,-1
   415b0:	dfc00017 	ldw	ra,0(sp)
   415b4:	dec00104 	addi	sp,sp,4
   415b8:	f800283a 	ret
   415bc:	d0a04404 	addi	r2,gp,-32496
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   415c0:	00c01444 	movi	r3,81
   415c4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   415c8:	00bfffc4 	movi	r2,-1
   415cc:	f800283a 	ret

000415d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   415d0:	deffff04 	addi	sp,sp,-4
   415d4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   415d8:	004189c0 	call	4189c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   415dc:	00800044 	movi	r2,1
   415e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   415e4:	dfc00017 	ldw	ra,0(sp)
   415e8:	dec00104 	addi	sp,sp,4
   415ec:	f800283a 	ret

000415f0 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   415f0:	00800234 	movhi	r2,8
   415f4:	10841004 	addi	r2,r2,4160
   415f8:	00c00044 	movi	r3,1
   415fc:	10c00035 	stwio	r3,0(r2)
   41600:	f800283a 	ret

00041604 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   41604:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   41608:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   4160c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   41610:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   41614:	2980072e 	bgeu	r5,r6,41634 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   41618:	38c00037 	ldwio	r3,0(r7)
   4161c:	18ffffec 	andhi	r3,r3,65535
   41620:	183ffc26 	beq	r3,zero,41614 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   41624:	28c00007 	ldb	r3,0(r5)
   41628:	20c00035 	stwio	r3,0(r4)
   4162c:	29400044 	addi	r5,r5,1
   41630:	003ff806 	br	41614 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
   41634:	f800283a 	ret

00041638 <perf_get_section_time>:
{
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;

  PERF_STOP_MEASURING(hw_base_address);
   41638:	20000035 	stwio	zero,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
   4163c:	280a913a 	slli	r5,r5,4
   41640:	2145883a 	add	r2,r4,r5
   41644:	10800037 	ldwio	r2,0(r2)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   41648:	29400104 	addi	r5,r5,4
   4164c:	2149883a 	add	r4,r4,r5
   41650:	20c00037 	ldwio	r3,0(r4)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
}
   41654:	f800283a 	ret

00041658 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  return perf_get_section_time (hw_base_address, 0);
   41658:	000b883a 	mov	r5,zero
   4165c:	00416381 	jmpi	41638 <perf_get_section_time>

00041660 <perf_get_num_starts>:
}

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  return IORD(hw_base_address, ((which_section*4)+2));
   41660:	280a913a 	slli	r5,r5,4
   41664:	29400204 	addi	r5,r5,8
   41668:	2149883a 	add	r4,r4,r5
}
   4166c:	20800037 	ldwio	r2,0(r4)
   41670:	f800283a 	ret

00041674 <alt_get_performance_counter_base>:
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
#endif
}
   41674:	00800234 	movhi	r2,8
   41678:	10841004 	addi	r2,r2,4160
   4167c:	f800283a 	ret

00041680 <alt_get_cpu_freq>:
 */
alt_u32 
alt_get_cpu_freq()
{
    return ALT_CPU_FREQ;
}
   41680:	0080bef4 	movhi	r2,763
   41684:	10bc2004 	addi	r2,r2,-3968
   41688:	f800283a 	ret

0004168c <perf_print_formatted_report>:
 * second.
 */
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   4168c:	defff404 	addi	sp,sp,-48
   41690:	df000915 	stw	fp,36(sp)
   41694:	dd800715 	stw	r22,28(sp)
   41698:	dd000515 	stw	r20,20(sp)
   4169c:	282d883a 	mov	r22,r5
   416a0:	2029883a 	mov	r20,r4
   416a4:	3039883a 	mov	fp,r6
   416a8:	dfc00a15 	stw	ra,40(sp)
   416ac:	ddc00815 	stw	r23,32(sp)
   416b0:	dd400615 	stw	r21,24(sp)
   416b4:	dcc00415 	stw	r19,16(sp)
   416b8:	dc800315 	stw	r18,12(sp)
   416bc:	dc400215 	stw	r17,8(sp)
   416c0:	dc000115 	stw	r16,4(sp)
   416c4:	d9c00b15 	stw	r7,44(sp)
      "+---------------+-----+------------+---------------+------------+\n";
    
    const char* column_header =
      "| Section       |  %  | Time (usec)|  Time (clocks)|Occurrences |\n";

    PERF_STOP_MEASURING (perf_base);
   416c8:	20000035 	stwio	zero,0(r4)

    va_start (name_args, num_sections);

    total_clocks = perf_get_total_time (perf_base);
   416cc:	00416580 	call	41658 <perf_get_total_time>
    total_usec = total_clocks * 1000000 / clock_freq_hertz;

    // Print the total at the top:
    printf("--Performance Counter Report--\n");
   416d0:	01000134 	movhi	r4,4
   416d4:	2107f104 	addi	r4,r4,8132

    PERF_STOP_MEASURING (perf_base);

    va_start (name_args, num_sections);

    total_clocks = perf_get_total_time (perf_base);
   416d8:	1825883a 	mov	r18,r3
   416dc:	1023883a 	mov	r17,r2
    total_usec = total_clocks * 1000000 / clock_freq_hertz;

    // Print the total at the top:
    printf("--Performance Counter Report--\n");
   416e0:	00409540 	call	40954 <puts>
    printf("Total Time : %llu usec ", total_usec);            
   416e4:	018003f4 	movhi	r6,15
   416e8:	31909004 	addi	r6,r6,16960
   416ec:	000f883a 	mov	r7,zero
   416f0:	8809883a 	mov	r4,r17
   416f4:	900b883a 	mov	r5,r18
   416f8:	00418a40 	call	418a4 <__muldi3>
   416fc:	000f883a 	mov	r7,zero
   41700:	b00d883a 	mov	r6,r22
   41704:	1009883a 	mov	r4,r2
   41708:	180b883a 	mov	r5,r3
   4170c:	00419040 	call	41904 <__udivdi3>
   41710:	01000134 	movhi	r4,4
   41714:	180d883a 	mov	r6,r3
   41718:	100b883a 	mov	r5,r2
   4171c:	2107f904 	addi	r4,r4,8164
   41720:	00408880 	call	40888 <printf>
    printf("(%llu clock-cycles)\n", total_clocks);            
   41724:	01000134 	movhi	r4,4
   41728:	900d883a 	mov	r6,r18
   4172c:	880b883a 	mov	r5,r17
   41730:	2107ff04 	addi	r4,r4,8188
   41734:	00408880 	call	40888 <printf>
    printf("%s", separator);
   41738:	01000134 	movhi	r4,4
   4173c:	21080504 	addi	r4,r4,8212
   41740:	00409540 	call	40954 <puts>
    printf("%s", column_header);
   41744:	01000134 	movhi	r4,4
   41748:	21081604 	addi	r4,r4,8280
   4174c:	00409540 	call	40954 <puts>
    printf("%s", separator);
   41750:	01000134 	movhi	r4,4
   41754:	21080504 	addi	r4,r4,8212
   41758:	00409540 	call	40954 <puts>

    section_name = va_arg(name_args, char*);
   4175c:	d9800b17 	ldw	r6,44(sp)
   41760:	dcc00c04 	addi	r19,sp,48

    for (section_num = 1; section_num <= num_sections; section_num++)
   41764:	04000044 	movi	r16,1
   41768:	e4003f16 	blt	fp,r16,41868 <perf_print_formatted_report+0x1dc>
    {
        section_clocks = perf_get_section_time (perf_base, section_num);
   4176c:	800b883a 	mov	r5,r16
   41770:	a009883a 	mov	r4,r20
   41774:	d9800015 	stw	r6,0(sp)
   41778:	00416380 	call	41638 <perf_get_section_time>
        /* section name, small C library does not support left-justify, 
         * uses right-justify instead.
         */
        printf ("|%15s", section_name);
   4177c:	d9800017 	ldw	r6,0(sp)
   41780:	01000134 	movhi	r4,4
   41784:	21082704 	addi	r4,r4,8348
   41788:	300b883a 	mov	r5,r6

    section_name = va_arg(name_args, char*);

    for (section_num = 1; section_num <= num_sections; section_num++)
    {
        section_clocks = perf_get_section_time (perf_base, section_num);
   4178c:	102b883a 	mov	r21,r2
   41790:	182f883a 	mov	r23,r3
        /* section name, small C library does not support left-justify, 
         * uses right-justify instead.
         */
        printf ("|%15s", section_name);
   41794:	00408880 	call	40888 <printf>

        /* section usage */
        if (total_clocks) 
   41798:	8c84b03a 	or	r2,r17,r18
   4179c:	10000c26 	beq	r2,zero,417d0 <perf_print_formatted_report+0x144>
        {
            printf ("|%4u ", (unsigned int)(section_clocks * 100 / total_clocks));
   417a0:	01801904 	movi	r6,100
   417a4:	000f883a 	mov	r7,zero
   417a8:	a809883a 	mov	r4,r21
   417ac:	b80b883a 	mov	r5,r23
   417b0:	00418a40 	call	418a4 <__muldi3>
   417b4:	180b883a 	mov	r5,r3
   417b8:	880d883a 	mov	r6,r17
   417bc:	900f883a 	mov	r7,r18
   417c0:	1009883a 	mov	r4,r2
   417c4:	00419040 	call	41904 <__udivdi3>
   417c8:	100b883a 	mov	r5,r2
   417cc:	00000106 	br	417d4 <perf_print_formatted_report+0x148>
        }
        else
        {
            printf ("|%4u ", 0);
   417d0:	000b883a 	mov	r5,zero
   417d4:	01000134 	movhi	r4,4
   417d8:	21082904 	addi	r4,r4,8356
   417dc:	00408880 	call	40888 <printf>
        }        

        /* section usecs */
        printf ("|%11llu ", (alt_u64)(section_clocks * 1000000 / clock_freq_hertz));
   417e0:	018003f4 	movhi	r6,15
   417e4:	31909004 	addi	r6,r6,16960
   417e8:	000f883a 	mov	r7,zero
   417ec:	a809883a 	mov	r4,r21
   417f0:	b80b883a 	mov	r5,r23
   417f4:	00418a40 	call	418a4 <__muldi3>
   417f8:	000f883a 	mov	r7,zero
   417fc:	b00d883a 	mov	r6,r22
   41800:	1009883a 	mov	r4,r2
   41804:	180b883a 	mov	r5,r3
   41808:	00419040 	call	41904 <__udivdi3>
   4180c:	01000134 	movhi	r4,4
   41810:	180d883a 	mov	r6,r3
   41814:	100b883a 	mov	r5,r2
   41818:	21082b04 	addi	r4,r4,8364
   4181c:	00408880 	call	40888 <printf>

        /* section clocks */
        printf ("|%14u ", (unsigned int)section_clocks);
   41820:	01000134 	movhi	r4,4
   41824:	a80b883a 	mov	r5,r21
   41828:	21082e04 	addi	r4,r4,8376
   4182c:	00408880 	call	40888 <printf>

        /* section occurrences */
        printf ("|%10u  |\n",
        (unsigned int) perf_get_num_starts (perf_base, section_num));
   41830:	800b883a 	mov	r5,r16
   41834:	a009883a 	mov	r4,r20
   41838:	00416600 	call	41660 <perf_get_num_starts>

        /* section clocks */
        printf ("|%14u ", (unsigned int)section_clocks);

        /* section occurrences */
        printf ("|%10u  |\n",
   4183c:	01000134 	movhi	r4,4
   41840:	100b883a 	mov	r5,r2
   41844:	21083004 	addi	r4,r4,8384
   41848:	00408880 	call	40888 <printf>
        (unsigned int) perf_get_num_starts (perf_base, section_num));

        printf ("%s", separator);
   4184c:	01000134 	movhi	r4,4
   41850:	21080504 	addi	r4,r4,8212
   41854:	00409540 	call	40954 <puts>

        section_name = va_arg(name_args, char*);
   41858:	99800017 	ldw	r6,0(r19)
    printf("%s", column_header);
    printf("%s", separator);

    section_name = va_arg(name_args, char*);

    for (section_num = 1; section_num <= num_sections; section_num++)
   4185c:	84000044 	addi	r16,r16,1
        printf ("|%10u  |\n",
        (unsigned int) perf_get_num_starts (perf_base, section_num));

        printf ("%s", separator);

        section_name = va_arg(name_args, char*);
   41860:	9cc00104 	addi	r19,r19,4
   41864:	003fc006 	br	41768 <perf_print_formatted_report+0xdc>
    }

    va_end (name_args);

    return 0;
}
   41868:	0005883a 	mov	r2,zero
   4186c:	dfc00a17 	ldw	ra,40(sp)
   41870:	df000917 	ldw	fp,36(sp)
   41874:	ddc00817 	ldw	r23,32(sp)
   41878:	dd800717 	ldw	r22,28(sp)
   4187c:	dd400617 	ldw	r21,24(sp)
   41880:	dd000517 	ldw	r20,20(sp)
   41884:	dcc00417 	ldw	r19,16(sp)
   41888:	dc800317 	ldw	r18,12(sp)
   4188c:	dc400217 	ldw	r17,8(sp)
   41890:	dc000117 	ldw	r16,4(sp)
   41894:	dec00c04 	addi	sp,sp,48
   41898:	f800283a 	ret

0004189c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   4189c:	000170fa 	wrctl	ienable,zero
   418a0:	f800283a 	ret

000418a4 <__muldi3>:
   418a4:	223fffcc 	andi	r8,r4,65535
   418a8:	2006d43a 	srli	r3,r4,16
   418ac:	32bfffcc 	andi	r10,r6,65535
   418b0:	3012d43a 	srli	r9,r6,16
   418b4:	4297383a 	mul	r11,r8,r10
   418b8:	1a95383a 	mul	r10,r3,r10
   418bc:	4251383a 	mul	r8,r8,r9
   418c0:	5804d43a 	srli	r2,r11,16
   418c4:	4291883a 	add	r8,r8,r10
   418c8:	1205883a 	add	r2,r2,r8
   418cc:	1a51383a 	mul	r8,r3,r9
   418d0:	1280022e 	bgeu	r2,r10,418dc <__muldi3+0x38>
   418d4:	00c00074 	movhi	r3,1
   418d8:	40d1883a 	add	r8,r8,r3
   418dc:	1006d43a 	srli	r3,r2,16
   418e0:	21cf383a 	mul	r7,r4,r7
   418e4:	314b383a 	mul	r5,r6,r5
   418e8:	1004943a 	slli	r2,r2,16
   418ec:	1a11883a 	add	r8,r3,r8
   418f0:	5affffcc 	andi	r11,r11,65535
   418f4:	3947883a 	add	r3,r7,r5
   418f8:	12c5883a 	add	r2,r2,r11
   418fc:	1a07883a 	add	r3,r3,r8
   41900:	f800283a 	ret

00041904 <__udivdi3>:
   41904:	defff504 	addi	sp,sp,-44
   41908:	dcc00415 	stw	r19,16(sp)
   4190c:	dc000115 	stw	r16,4(sp)
   41910:	dfc00a15 	stw	ra,40(sp)
   41914:	df000915 	stw	fp,36(sp)
   41918:	ddc00815 	stw	r23,32(sp)
   4191c:	dd800715 	stw	r22,28(sp)
   41920:	dd400615 	stw	r21,24(sp)
   41924:	dd000515 	stw	r20,20(sp)
   41928:	dc800315 	stw	r18,12(sp)
   4192c:	dc400215 	stw	r17,8(sp)
   41930:	2027883a 	mov	r19,r4
   41934:	2821883a 	mov	r16,r5
   41938:	3800411e 	bne	r7,zero,41a40 <__udivdi3+0x13c>
   4193c:	3023883a 	mov	r17,r6
   41940:	2025883a 	mov	r18,r4
   41944:	2980522e 	bgeu	r5,r6,41a90 <__udivdi3+0x18c>
   41948:	00bfffd4 	movui	r2,65535
   4194c:	282d883a 	mov	r22,r5
   41950:	1180a836 	bltu	r2,r6,41bf4 <__udivdi3+0x2f0>
   41954:	00803fc4 	movi	r2,255
   41958:	1185803a 	cmpltu	r2,r2,r6
   4195c:	100490fa 	slli	r2,r2,3
   41960:	3086d83a 	srl	r3,r6,r2
   41964:	01000134 	movhi	r4,4
   41968:	21083304 	addi	r4,r4,8396
   4196c:	20c7883a 	add	r3,r4,r3
   41970:	18c00003 	ldbu	r3,0(r3)
   41974:	1885883a 	add	r2,r3,r2
   41978:	00c00804 	movi	r3,32
   4197c:	1887c83a 	sub	r3,r3,r2
   41980:	18000526 	beq	r3,zero,41998 <__udivdi3+0x94>
   41984:	80e0983a 	sll	r16,r16,r3
   41988:	9884d83a 	srl	r2,r19,r2
   4198c:	30e2983a 	sll	r17,r6,r3
   41990:	98e4983a 	sll	r18,r19,r3
   41994:	142cb03a 	or	r22,r2,r16
   41998:	882ad43a 	srli	r21,r17,16
   4199c:	b009883a 	mov	r4,r22
   419a0:	8d3fffcc 	andi	r20,r17,65535
   419a4:	a80b883a 	mov	r5,r21
   419a8:	00411ec0 	call	411ec <__umodsi3>
   419ac:	b009883a 	mov	r4,r22
   419b0:	a80b883a 	mov	r5,r21
   419b4:	1027883a 	mov	r19,r2
   419b8:	00411880 	call	41188 <__udivsi3>
   419bc:	102d883a 	mov	r22,r2
   419c0:	9826943a 	slli	r19,r19,16
   419c4:	9004d43a 	srli	r2,r18,16
   419c8:	a5a1383a 	mul	r16,r20,r22
   419cc:	14c4b03a 	or	r2,r2,r19
   419d0:	1400052e 	bgeu	r2,r16,419e8 <__udivdi3+0xe4>
   419d4:	1445883a 	add	r2,r2,r17
   419d8:	b0ffffc4 	addi	r3,r22,-1
   419dc:	14400136 	bltu	r2,r17,419e4 <__udivdi3+0xe0>
   419e0:	14012336 	bltu	r2,r16,41e70 <__udivdi3+0x56c>
   419e4:	182d883a 	mov	r22,r3
   419e8:	1421c83a 	sub	r16,r2,r16
   419ec:	a80b883a 	mov	r5,r21
   419f0:	8009883a 	mov	r4,r16
   419f4:	00411ec0 	call	411ec <__umodsi3>
   419f8:	1027883a 	mov	r19,r2
   419fc:	a80b883a 	mov	r5,r21
   41a00:	8009883a 	mov	r4,r16
   41a04:	00411880 	call	41188 <__udivsi3>
   41a08:	9826943a 	slli	r19,r19,16
   41a0c:	a0a9383a 	mul	r20,r20,r2
   41a10:	94bfffcc 	andi	r18,r18,65535
   41a14:	94e4b03a 	or	r18,r18,r19
   41a18:	9500052e 	bgeu	r18,r20,41a30 <__udivdi3+0x12c>
   41a1c:	8ca5883a 	add	r18,r17,r18
   41a20:	10ffffc4 	addi	r3,r2,-1
   41a24:	9440f136 	bltu	r18,r17,41dec <__udivdi3+0x4e8>
   41a28:	9500f02e 	bgeu	r18,r20,41dec <__udivdi3+0x4e8>
   41a2c:	10bfff84 	addi	r2,r2,-2
   41a30:	b00c943a 	slli	r6,r22,16
   41a34:	0007883a 	mov	r3,zero
   41a38:	3084b03a 	or	r2,r6,r2
   41a3c:	00005906 	br	41ba4 <__udivdi3+0x2a0>
   41a40:	29c05636 	bltu	r5,r7,41b9c <__udivdi3+0x298>
   41a44:	00bfffd4 	movui	r2,65535
   41a48:	11c0622e 	bgeu	r2,r7,41bd4 <__udivdi3+0x2d0>
   41a4c:	00804034 	movhi	r2,256
   41a50:	10bfffc4 	addi	r2,r2,-1
   41a54:	11c0ee36 	bltu	r2,r7,41e10 <__udivdi3+0x50c>
   41a58:	00800404 	movi	r2,16
   41a5c:	3886d83a 	srl	r3,r7,r2
   41a60:	01000134 	movhi	r4,4
   41a64:	21083304 	addi	r4,r4,8396
   41a68:	20c7883a 	add	r3,r4,r3
   41a6c:	18c00003 	ldbu	r3,0(r3)
   41a70:	05400804 	movi	r21,32
   41a74:	1885883a 	add	r2,r3,r2
   41a78:	a8abc83a 	sub	r21,r21,r2
   41a7c:	a800621e 	bne	r21,zero,41c08 <__udivdi3+0x304>
   41a80:	3c00e936 	bltu	r7,r16,41e28 <__udivdi3+0x524>
   41a84:	9985403a 	cmpgeu	r2,r19,r6
   41a88:	0007883a 	mov	r3,zero
   41a8c:	00004506 	br	41ba4 <__udivdi3+0x2a0>
   41a90:	3000041e 	bne	r6,zero,41aa4 <__udivdi3+0x1a0>
   41a94:	000b883a 	mov	r5,zero
   41a98:	01000044 	movi	r4,1
   41a9c:	00411880 	call	41188 <__udivsi3>
   41aa0:	1023883a 	mov	r17,r2
   41aa4:	00bfffd4 	movui	r2,65535
   41aa8:	14404e2e 	bgeu	r2,r17,41be4 <__udivdi3+0x2e0>
   41aac:	00804034 	movhi	r2,256
   41ab0:	10bfffc4 	addi	r2,r2,-1
   41ab4:	1440d836 	bltu	r2,r17,41e18 <__udivdi3+0x514>
   41ab8:	00800404 	movi	r2,16
   41abc:	8886d83a 	srl	r3,r17,r2
   41ac0:	01000134 	movhi	r4,4
   41ac4:	21083304 	addi	r4,r4,8396
   41ac8:	20c7883a 	add	r3,r4,r3
   41acc:	18c00003 	ldbu	r3,0(r3)
   41ad0:	1885883a 	add	r2,r3,r2
   41ad4:	00c00804 	movi	r3,32
   41ad8:	1887c83a 	sub	r3,r3,r2
   41adc:	18008f1e 	bne	r3,zero,41d1c <__udivdi3+0x418>
   41ae0:	882ad43a 	srli	r21,r17,16
   41ae4:	8461c83a 	sub	r16,r16,r17
   41ae8:	8d3fffcc 	andi	r20,r17,65535
   41aec:	00c00044 	movi	r3,1
   41af0:	8009883a 	mov	r4,r16
   41af4:	a80b883a 	mov	r5,r21
   41af8:	d8c00015 	stw	r3,0(sp)
   41afc:	00411ec0 	call	411ec <__umodsi3>
   41b00:	8009883a 	mov	r4,r16
   41b04:	a80b883a 	mov	r5,r21
   41b08:	1027883a 	mov	r19,r2
   41b0c:	00411880 	call	41188 <__udivsi3>
   41b10:	9826943a 	slli	r19,r19,16
   41b14:	9008d43a 	srli	r4,r18,16
   41b18:	1521383a 	mul	r16,r2,r20
   41b1c:	102d883a 	mov	r22,r2
   41b20:	24c8b03a 	or	r4,r4,r19
   41b24:	d8c00017 	ldw	r3,0(sp)
   41b28:	2400052e 	bgeu	r4,r16,41b40 <__udivdi3+0x23c>
   41b2c:	2449883a 	add	r4,r4,r17
   41b30:	b0bfffc4 	addi	r2,r22,-1
   41b34:	24400136 	bltu	r4,r17,41b3c <__udivdi3+0x238>
   41b38:	2400ca36 	bltu	r4,r16,41e64 <__udivdi3+0x560>
   41b3c:	102d883a 	mov	r22,r2
   41b40:	2421c83a 	sub	r16,r4,r16
   41b44:	a80b883a 	mov	r5,r21
   41b48:	8009883a 	mov	r4,r16
   41b4c:	d8c00015 	stw	r3,0(sp)
   41b50:	00411ec0 	call	411ec <__umodsi3>
   41b54:	1027883a 	mov	r19,r2
   41b58:	a80b883a 	mov	r5,r21
   41b5c:	8009883a 	mov	r4,r16
   41b60:	00411880 	call	41188 <__udivsi3>
   41b64:	9826943a 	slli	r19,r19,16
   41b68:	1529383a 	mul	r20,r2,r20
   41b6c:	94bfffcc 	andi	r18,r18,65535
   41b70:	94e4b03a 	or	r18,r18,r19
   41b74:	d8c00017 	ldw	r3,0(sp)
   41b78:	9500052e 	bgeu	r18,r20,41b90 <__udivdi3+0x28c>
   41b7c:	8ca5883a 	add	r18,r17,r18
   41b80:	113fffc4 	addi	r4,r2,-1
   41b84:	94409736 	bltu	r18,r17,41de4 <__udivdi3+0x4e0>
   41b88:	9500962e 	bgeu	r18,r20,41de4 <__udivdi3+0x4e0>
   41b8c:	10bfff84 	addi	r2,r2,-2
   41b90:	b00c943a 	slli	r6,r22,16
   41b94:	3084b03a 	or	r2,r6,r2
   41b98:	00000206 	br	41ba4 <__udivdi3+0x2a0>
   41b9c:	0007883a 	mov	r3,zero
   41ba0:	0005883a 	mov	r2,zero
   41ba4:	dfc00a17 	ldw	ra,40(sp)
   41ba8:	df000917 	ldw	fp,36(sp)
   41bac:	ddc00817 	ldw	r23,32(sp)
   41bb0:	dd800717 	ldw	r22,28(sp)
   41bb4:	dd400617 	ldw	r21,24(sp)
   41bb8:	dd000517 	ldw	r20,20(sp)
   41bbc:	dcc00417 	ldw	r19,16(sp)
   41bc0:	dc800317 	ldw	r18,12(sp)
   41bc4:	dc400217 	ldw	r17,8(sp)
   41bc8:	dc000117 	ldw	r16,4(sp)
   41bcc:	dec00b04 	addi	sp,sp,44
   41bd0:	f800283a 	ret
   41bd4:	00803fc4 	movi	r2,255
   41bd8:	11c5803a 	cmpltu	r2,r2,r7
   41bdc:	100490fa 	slli	r2,r2,3
   41be0:	003f9e06 	br	41a5c <__udivdi3+0x158>
   41be4:	00803fc4 	movi	r2,255
   41be8:	1445803a 	cmpltu	r2,r2,r17
   41bec:	100490fa 	slli	r2,r2,3
   41bf0:	003fb206 	br	41abc <__udivdi3+0x1b8>
   41bf4:	00804034 	movhi	r2,256
   41bf8:	10bfffc4 	addi	r2,r2,-1
   41bfc:	11808836 	bltu	r2,r6,41e20 <__udivdi3+0x51c>
   41c00:	00800404 	movi	r2,16
   41c04:	003f5606 	br	41960 <__udivdi3+0x5c>
   41c08:	30aed83a 	srl	r23,r6,r2
   41c0c:	3d4e983a 	sll	r7,r7,r21
   41c10:	80acd83a 	srl	r22,r16,r2
   41c14:	9884d83a 	srl	r2,r19,r2
   41c18:	3deeb03a 	or	r23,r7,r23
   41c1c:	b824d43a 	srli	r18,r23,16
   41c20:	8560983a 	sll	r16,r16,r21
   41c24:	b009883a 	mov	r4,r22
   41c28:	900b883a 	mov	r5,r18
   41c2c:	3568983a 	sll	r20,r6,r21
   41c30:	1420b03a 	or	r16,r2,r16
   41c34:	00411ec0 	call	411ec <__umodsi3>
   41c38:	b009883a 	mov	r4,r22
   41c3c:	900b883a 	mov	r5,r18
   41c40:	1023883a 	mov	r17,r2
   41c44:	00411880 	call	41188 <__udivsi3>
   41c48:	8808943a 	slli	r4,r17,16
   41c4c:	bf3fffcc 	andi	fp,r23,65535
   41c50:	8006d43a 	srli	r3,r16,16
   41c54:	e0a3383a 	mul	r17,fp,r2
   41c58:	100d883a 	mov	r6,r2
   41c5c:	1906b03a 	or	r3,r3,r4
   41c60:	1c40042e 	bgeu	r3,r17,41c74 <__udivdi3+0x370>
   41c64:	1dc7883a 	add	r3,r3,r23
   41c68:	10bfffc4 	addi	r2,r2,-1
   41c6c:	1dc0752e 	bgeu	r3,r23,41e44 <__udivdi3+0x540>
   41c70:	100d883a 	mov	r6,r2
   41c74:	1c63c83a 	sub	r17,r3,r17
   41c78:	900b883a 	mov	r5,r18
   41c7c:	8809883a 	mov	r4,r17
   41c80:	d9800015 	stw	r6,0(sp)
   41c84:	00411ec0 	call	411ec <__umodsi3>
   41c88:	102d883a 	mov	r22,r2
   41c8c:	8809883a 	mov	r4,r17
   41c90:	900b883a 	mov	r5,r18
   41c94:	00411880 	call	41188 <__udivsi3>
   41c98:	b02c943a 	slli	r22,r22,16
   41c9c:	e089383a 	mul	r4,fp,r2
   41ca0:	843fffcc 	andi	r16,r16,65535
   41ca4:	85a0b03a 	or	r16,r16,r22
   41ca8:	d9800017 	ldw	r6,0(sp)
   41cac:	8100042e 	bgeu	r16,r4,41cc0 <__udivdi3+0x3bc>
   41cb0:	85e1883a 	add	r16,r16,r23
   41cb4:	10ffffc4 	addi	r3,r2,-1
   41cb8:	85c05e2e 	bgeu	r16,r23,41e34 <__udivdi3+0x530>
   41cbc:	1805883a 	mov	r2,r3
   41cc0:	300c943a 	slli	r6,r6,16
   41cc4:	a17fffcc 	andi	r5,r20,65535
   41cc8:	a028d43a 	srli	r20,r20,16
   41ccc:	3084b03a 	or	r2,r6,r2
   41cd0:	10ffffcc 	andi	r3,r2,65535
   41cd4:	100cd43a 	srli	r6,r2,16
   41cd8:	194f383a 	mul	r7,r3,r5
   41cdc:	1d07383a 	mul	r3,r3,r20
   41ce0:	314b383a 	mul	r5,r6,r5
   41ce4:	3810d43a 	srli	r8,r7,16
   41ce8:	8121c83a 	sub	r16,r16,r4
   41cec:	1947883a 	add	r3,r3,r5
   41cf0:	40c7883a 	add	r3,r8,r3
   41cf4:	350d383a 	mul	r6,r6,r20
   41cf8:	1940022e 	bgeu	r3,r5,41d04 <__udivdi3+0x400>
   41cfc:	01000074 	movhi	r4,1
   41d00:	310d883a 	add	r6,r6,r4
   41d04:	1828d43a 	srli	r20,r3,16
   41d08:	a18d883a 	add	r6,r20,r6
   41d0c:	81803e36 	bltu	r16,r6,41e08 <__udivdi3+0x504>
   41d10:	81803826 	beq	r16,r6,41df4 <__udivdi3+0x4f0>
   41d14:	0007883a 	mov	r3,zero
   41d18:	003fa206 	br	41ba4 <__udivdi3+0x2a0>
   41d1c:	88e2983a 	sll	r17,r17,r3
   41d20:	80a8d83a 	srl	r20,r16,r2
   41d24:	80e0983a 	sll	r16,r16,r3
   41d28:	882ad43a 	srli	r21,r17,16
   41d2c:	9884d83a 	srl	r2,r19,r2
   41d30:	a009883a 	mov	r4,r20
   41d34:	a80b883a 	mov	r5,r21
   41d38:	142eb03a 	or	r23,r2,r16
   41d3c:	98e4983a 	sll	r18,r19,r3
   41d40:	00411ec0 	call	411ec <__umodsi3>
   41d44:	a009883a 	mov	r4,r20
   41d48:	a80b883a 	mov	r5,r21
   41d4c:	1021883a 	mov	r16,r2
   41d50:	00411880 	call	41188 <__udivsi3>
   41d54:	1039883a 	mov	fp,r2
   41d58:	8d3fffcc 	andi	r20,r17,65535
   41d5c:	8020943a 	slli	r16,r16,16
   41d60:	b804d43a 	srli	r2,r23,16
   41d64:	a72d383a 	mul	r22,r20,fp
   41d68:	1404b03a 	or	r2,r2,r16
   41d6c:	1580062e 	bgeu	r2,r22,41d88 <__udivdi3+0x484>
   41d70:	1445883a 	add	r2,r2,r17
   41d74:	e0ffffc4 	addi	r3,fp,-1
   41d78:	14403836 	bltu	r2,r17,41e5c <__udivdi3+0x558>
   41d7c:	1580372e 	bgeu	r2,r22,41e5c <__udivdi3+0x558>
   41d80:	e73fff84 	addi	fp,fp,-2
   41d84:	1445883a 	add	r2,r2,r17
   41d88:	15adc83a 	sub	r22,r2,r22
   41d8c:	a80b883a 	mov	r5,r21
   41d90:	b009883a 	mov	r4,r22
   41d94:	00411ec0 	call	411ec <__umodsi3>
   41d98:	1027883a 	mov	r19,r2
   41d9c:	b009883a 	mov	r4,r22
   41da0:	a80b883a 	mov	r5,r21
   41da4:	00411880 	call	41188 <__udivsi3>
   41da8:	9826943a 	slli	r19,r19,16
   41dac:	a0a1383a 	mul	r16,r20,r2
   41db0:	b93fffcc 	andi	r4,r23,65535
   41db4:	24c8b03a 	or	r4,r4,r19
   41db8:	2400062e 	bgeu	r4,r16,41dd4 <__udivdi3+0x4d0>
   41dbc:	2449883a 	add	r4,r4,r17
   41dc0:	10ffffc4 	addi	r3,r2,-1
   41dc4:	24402336 	bltu	r4,r17,41e54 <__udivdi3+0x550>
   41dc8:	2400222e 	bgeu	r4,r16,41e54 <__udivdi3+0x550>
   41dcc:	10bfff84 	addi	r2,r2,-2
   41dd0:	2449883a 	add	r4,r4,r17
   41dd4:	e038943a 	slli	fp,fp,16
   41dd8:	2421c83a 	sub	r16,r4,r16
   41ddc:	e086b03a 	or	r3,fp,r2
   41de0:	003f4306 	br	41af0 <__udivdi3+0x1ec>
   41de4:	2005883a 	mov	r2,r4
   41de8:	003f6906 	br	41b90 <__udivdi3+0x28c>
   41dec:	1805883a 	mov	r2,r3
   41df0:	003f0f06 	br	41a30 <__udivdi3+0x12c>
   41df4:	1806943a 	slli	r3,r3,16
   41df8:	9d66983a 	sll	r19,r19,r21
   41dfc:	39ffffcc 	andi	r7,r7,65535
   41e00:	19c7883a 	add	r3,r3,r7
   41e04:	98ffc32e 	bgeu	r19,r3,41d14 <__udivdi3+0x410>
   41e08:	10bfffc4 	addi	r2,r2,-1
   41e0c:	003fc106 	br	41d14 <__udivdi3+0x410>
   41e10:	00800604 	movi	r2,24
   41e14:	003f1106 	br	41a5c <__udivdi3+0x158>
   41e18:	00800604 	movi	r2,24
   41e1c:	003f2706 	br	41abc <__udivdi3+0x1b8>
   41e20:	00800604 	movi	r2,24
   41e24:	003ece06 	br	41960 <__udivdi3+0x5c>
   41e28:	0007883a 	mov	r3,zero
   41e2c:	00800044 	movi	r2,1
   41e30:	003f5c06 	br	41ba4 <__udivdi3+0x2a0>
   41e34:	813fa12e 	bgeu	r16,r4,41cbc <__udivdi3+0x3b8>
   41e38:	10bfff84 	addi	r2,r2,-2
   41e3c:	85e1883a 	add	r16,r16,r23
   41e40:	003f9f06 	br	41cc0 <__udivdi3+0x3bc>
   41e44:	1c7f8a2e 	bgeu	r3,r17,41c70 <__udivdi3+0x36c>
   41e48:	31bfff84 	addi	r6,r6,-2
   41e4c:	1dc7883a 	add	r3,r3,r23
   41e50:	003f8806 	br	41c74 <__udivdi3+0x370>
   41e54:	1805883a 	mov	r2,r3
   41e58:	003fde06 	br	41dd4 <__udivdi3+0x4d0>
   41e5c:	1839883a 	mov	fp,r3
   41e60:	003fc906 	br	41d88 <__udivdi3+0x484>
   41e64:	b5bfff84 	addi	r22,r22,-2
   41e68:	2449883a 	add	r4,r4,r17
   41e6c:	003f3406 	br	41b40 <__udivdi3+0x23c>
   41e70:	b5bfff84 	addi	r22,r22,-2
   41e74:	1445883a 	add	r2,r2,r17
   41e78:	003edb06 	br	419e8 <__udivdi3+0xe4>
